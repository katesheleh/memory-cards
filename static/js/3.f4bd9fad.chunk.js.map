{"version":3,"sources":["components/NewPassword/NewPassword.module.scss","components/NewPassword/NewPassword.tsx"],"names":["module","exports","validationSchema","Yup","firstNewPassword","required","min","secondNewPassword","React","memo","dispatch","useDispatch","token","useParams","success","useSelector","state","newPsw","errorMsg","request","error","formik","useFormik","initialValues","onSubmit","values","setNewPassword","trim","to","LOGIN","className","classes","container","handleSubmit","inputWrapper","type","labelTitle","errors","getFieldProps","disabled"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,UAAY,+BAA+B,aAAe,kCAAkC,SAAW,gC,iCCDzH,2GAcMC,EAAmB,kBAAMC,IAAW,CACvCC,iBAAkBD,MACdE,SAAS,YACTC,IAAI,EAAG,gCACXC,kBAAmBJ,MACfE,SAAS,YACTC,IAAI,EAAG,mCA4DCE,cAAMC,MAzDD,WAEjB,IAAMC,EAAWC,cACVC,EAASC,cAATD,MACDE,EAAUC,aAA8C,SAAAC,GAAK,OAAIA,EAAMC,OAAOH,WAC9EI,EAAWH,aAAsC,SAAAC,GAAK,OAAIA,EAAMG,QAAQC,SAExEC,EAASC,YAAU,CACtBC,cAAe,CACZnB,iBAAkB,GAClBG,kBAAmB,IAEtBL,mBACAsB,SAAU,SAAAC,GACPf,EAASgB,YAAeD,EAAOrB,iBAAiBuB,OAAQf,OAI9D,OAAIE,EACM,kBAAC,IAAD,CAAUc,GAAIC,MAIrB,yBAAKC,UAAWC,IAAQC,WACrB,4CAECd,GAAY,2BAAG,gCAASA,IAEzB,0BAAMM,SAAUH,EAAOY,cAEpB,yBAAKH,UAAWC,IAAQG,cACrB,kBAAC,IAAD,eAAOC,KAAK,WACLC,WAAY,wBACZhB,MAAOC,EAAOgB,OAAOjC,kBACjBiB,EAAOiB,cAAc,uBAGnC,yBAAKR,UAAWC,IAAQG,cACrB,kBAAC,IAAD,eAAOC,KAAK,WACLC,WAAY,oBACZhB,MAAOC,EAAOgB,OAAO9B,mBACjBc,EAAOiB,cAAc,wBAGnC,kBAAC,IAAD,CAAQF,WAAY,OACZD,KAAK,SACLI,SACGlB,EAAOI,OAAOrB,mBAAqBiB,EAAOI,OAAOlB,qBAC5Cc,EAAOgB,OAAOjC,oBACdiB,EAAOgB,OAAO9B,mBAL9B","file":"static/js/3.f4bd9fad.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"NewPassword_container__MmJpC\",\"inputWrapper\":\"NewPassword_inputWrapper__RAhym\",\"errorMsg\":\"NewPassword_errorMsg__1x7cS\"};","import React from 'react'\r\nimport {useParams} from 'react-router-dom'\r\nimport classes from './NewPassword.module.scss'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {setNewPassword} from '../../reducers/newPassword-reducer'\r\nimport {AppRootStateType} from '../../reducers/store'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {LOGIN} from '../../route'\r\nimport Input from '../common/Input/Input'\r\nimport Preloader from '../common/Preloader/Preloader'\r\nimport Button from '../common/Button/Button'\r\nimport {useFormik} from 'formik'\r\nimport * as Yup from 'yup'\r\n\r\nconst validationSchema = () => Yup.object({\r\n   firstNewPassword: Yup.string()\r\n      .required('Required')\r\n      .min(8, 'Must be 8 characters or less'),\r\n   secondNewPassword: Yup.string()\r\n      .required('Required')\r\n      .min(8, 'Must be 8 characters or less'),\r\n})\r\n\r\nconst NewPassword = () => {\r\n\r\n   const dispatch = useDispatch()\r\n   const {token} = useParams()\r\n   const success = useSelector<AppRootStateType, null | boolean>(state => state.newPsw.success)\r\n   const errorMsg = useSelector<AppRootStateType, string>(state => state.request.error)\r\n\r\n   const formik = useFormik({\r\n      initialValues: {\r\n         firstNewPassword: '',\r\n         secondNewPassword: '',\r\n      },\r\n      validationSchema,\r\n      onSubmit: values => {\r\n         dispatch(setNewPassword(values.firstNewPassword.trim(), token))\r\n      },\r\n   })\r\n\r\n   if (success) {\r\n      return <Redirect to={LOGIN}/>\r\n   }\r\n\r\n   return (\r\n      <div className={classes.container}>\r\n         <h1>New password</h1>\r\n\r\n         {errorMsg && <p><strong>{errorMsg}</strong></p>}\r\n\r\n         <form onSubmit={formik.handleSubmit}>\r\n\r\n            <div className={classes.inputWrapper}>\r\n               <Input type=\"password\"\r\n                      labelTitle={'Enter a new password:'}\r\n                      error={formik.errors.firstNewPassword}\r\n                      {...formik.getFieldProps('firstNewPassword')}/>\r\n            </div>\r\n\r\n            <div className={classes.inputWrapper}>\r\n               <Input type=\"password\"\r\n                      labelTitle={'Confirm password:'}\r\n                      error={formik.errors.secondNewPassword}\r\n                      {...formik.getFieldProps('secondNewPassword')}/>\r\n            </div>\r\n\r\n            <Button labelTitle={'Send'}\r\n                    type=\"submit\"\r\n                    disabled={\r\n                       formik.values.firstNewPassword !== formik.values.secondNewPassword\r\n                       || !!formik.errors.firstNewPassword\r\n                       || !!formik.errors.secondNewPassword\r\n                    }>Send\r\n            </Button>\r\n         </form>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default React.memo(NewPassword)\r\n"],"sourceRoot":""}