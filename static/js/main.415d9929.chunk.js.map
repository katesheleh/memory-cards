{"version":3,"sources":["reducers/request-reducer.ts","reducers/newPassword-reducer.ts","reducers/restorePassword-reducer.ts","reducers/registration-reducer.ts","components/common/Button/Button.module.scss","assets/images/loader.svg","api/api.ts","reducers/login-reducer.ts","components/Login/Login.tsx","components/Profile/Profile.tsx","components/Navbar/Navbar.tsx","components/Header/Header.tsx","api/cards-api.ts","reducers/cards-reducer.ts","components/Cards/Cards.tsx","api/pack-api.ts","reducers/pack-reducer.ts","components/common/Preloader/Preloader.tsx","components/Packs/Packs.tsx","App.tsx","components/common/Checkbox/Checkbox.tsx","serviceWorker.ts","reducers/store.ts","index.tsx","components/common/Button/Button.tsx","components/Navbar/Navbar.module.scss","api/auth-api.ts","components/common/Input/Input.module.scss","components/common/Icons/Icons.tsx","components/Login/Login.module.scss","components/Cards/Cards.module.scss","components/Packs/Packs.module.scss","components/common/Input/Input.tsx","components/common/Checkbox/Checkbox.module.scss","route.ts","components/Header/Header.module.scss","components/common/Preloader/Preloader.module.css"],"names":["initialState","error","isFetching","requestReducer","state","action","type","errorAC","isFetchingAC","success","newPswReducer","payload","setResult","value","setNewPassword","password","token","dispatch","authAPI","sendNewPassword","resetPasswordToken","then","res","status","catch","message","finally","selectedEmail","restorePswReducer","getEmailConfirmation","email","forgot","from","data","setSelectedEmail","isRegistered","registrationReducer","registrationTC","registration","module","exports","instance","axios","create","baseURL","withCredentials","isLoggedIn","profile","setIsLoggedInAC","authMeAC","validationSchema","Yup","required","min","React","memo","useSelector","login","errorMsg","request","useDispatch","formik","useFormik","initialValues","rememberMe","onSubmit","values","to","PROFILE","className","classes","container","handleSubmit","formItem","Input","labelTitle","errors","getFieldProps","htmlFor","Button","subLinks","RESTORE_PASSWORD","REGISTRATION","userData","name","publicCardPacksCount","PACKS","src","avatar","alt","width","onClick","logout","LOGIN","useEffect","document","body","addEventListener","handleOutsideClick","useState","activeMenu","setActiveMenu","menuRef","useRef","event","path","composedPath","includes","current","onClickLink","menu","ref","menuTitle","switch","active","prevState","switchLine","navbar","LINKS","activeClassName","activeLink","header","cardsAPI","cardsPack_id","get","question","answer","post","card","_id","model","put","delete","getCards","cardsTotalCount","maxGrade","minGrade","page","pageCount","getCardsTC","Cards","cards","cardId","useParams","removeCard","removeCardAC","console","log","response","removeCardTC","addCard","newCard","addCardTC","editCard","card_id","editCardTC","table","tableHeader","tableRow","map","c","key","packAPI","user_id","cardsPack","private","rating","pack_id","cardPacks","cardPacksTotalCount","maxCardsCount","minCardsCount","tokenDeathTime","getPackTC","styles","wrapper","preloader","img","Packs","requestIsFetching","packs","removePack","removePackAC","removePackTC","addPack","newPack","newCardsPack","addPackTC","editPack","editPackTC","pack","Registration","props","restProps","label","checkbox","customCheckbox","lazy","RestorePassword","NewPassword","NotFound","App","fallback","exact","render","paths","component","Boolean","window","location","hostname","match","rootReducer","combineReducers","newPsw","restorePsw","filter","p","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","unregister","btn","authMe","library","add","fas","iconDefinition","iconName","pref","Lookup","prefix","findIconDefinition","Icons","SignInAlt","icon","SignOutAlt","Key","Lock","Error","Eye","EyeSlash","SearchLocation","showPassword","setShowPassword","handleShowPassword","input","errorMessage","NEW_PASSWORD","CARDS"],"mappings":"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","file":"static/js/main.415d9929.chunk.js","sourcesContent":["let initialState = {\r\n   error: '',\r\n   isFetching: false,\r\n}\r\n\r\nexport type InitialState = typeof initialState\r\n\r\nexport const requestReducer = (state: InitialState = initialState, action: InitReducerActionsType) => {\r\n   switch (action.type) {\r\n      case 'REQUEST_ERROR':\r\n         return {...state, error: action.error}\r\n      case 'REQUEST_IS_FETCHING':\r\n         return {...state, isFetching: action.isFetching}\r\n      default:\r\n         return state\r\n   }\r\n}\r\n\r\nexport const errorAC = (error: string) => ({type: 'REQUEST_ERROR', error} as const)\r\nexport const isFetchingAC = (isFetching: boolean) => ({type: 'REQUEST_IS_FETCHING', isFetching} as const)\r\n\r\n\r\n// TYPES\r\nexport type ErrorACType = ReturnType<typeof errorAC>\r\nexport type isFetchingACType = ReturnType<typeof isFetchingAC>\r\ntype InitReducerActionsType = ErrorACType | isFetchingACType\r\n","import {Dispatch} from 'redux'\r\nimport {authAPI} from '../api/auth-api'\r\nimport {errorAC, ErrorACType, isFetchingAC, isFetchingACType} from './request-reducer'\r\n\r\nconst SET_RESULT = 'SET_RESULT'\r\n\r\nconst initialState = {\r\n   success: null as null | boolean,\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const newPswReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n   switch (action.type) {\r\n      case 'SET_RESULT':\r\n         return {\r\n            ...state,\r\n            success: action.payload,\r\n         }\r\n      default:\r\n         return state\r\n   }\r\n}\r\n\r\n// actions\r\n\r\nexport const setResult = (value: boolean) => ({\r\n   type: SET_RESULT,\r\n   payload: value,\r\n} as const)\r\ntype SetResultActionType = ReturnType<typeof setResult>\r\n\r\n// thunks\r\n\r\nexport const setNewPassword = (password: string, token: string) =>\r\n   (dispatch: ThunkDispatchType) => {\r\n      dispatch(isFetchingAC(true))\r\n      authAPI.sendNewPassword({\r\n         password,\r\n         resetPasswordToken: token,\r\n      }).then(res => {\r\n         if (res.status === 200) {\r\n            dispatch(setResult(true))\r\n         } else {\r\n            dispatch(setResult(false))\r\n            dispatch(errorAC('Oops...Something went wrong. Please try again later'))\r\n         }\r\n      }).catch(error => {\r\n         dispatch(setResult(false))\r\n         dispatch(errorAC(error.message))\r\n      }).finally(() => {\r\n         dispatch(isFetchingAC(false))\r\n      })\r\n   }\r\n\r\n// TYPES\r\n\r\ntype ActionsType = SetResultActionType\r\ntype ThunkDispatchType = Dispatch<ActionsType | isFetchingACType | ErrorACType>\r\n","import {Dispatch} from 'redux'\r\nimport {authAPI} from '../api/auth-api'\r\nimport {errorAC, ErrorACType, isFetchingAC, isFetchingACType} from './request-reducer'\r\n\r\nconst SET_CONFIRMING = 'SET_CONFIRMING'\r\nconst SET_SELECTED_EMAIL = 'SET_SELECTED_EMAIL'\r\n\r\nconst initialState = {\r\n   selectedEmail: '' as string,\r\n   success: false as boolean,\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const restorePswReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n   switch (action.type) {\r\n      case 'SET_CONFIRMING':\r\n         return {\r\n            ...state,\r\n            success: action.payload,\r\n         }\r\n      case 'SET_SELECTED_EMAIL':\r\n         return {\r\n            ...state,\r\n            selectedEmail: action.payload,\r\n         }\r\n      default:\r\n         return state\r\n   }\r\n}\r\n\r\n// actions\r\n\r\nconst setConfirming = (value: boolean) => ({\r\n   type: SET_CONFIRMING,\r\n   payload: value,\r\n} as const)\r\ntype SetConfirmingActionType = ReturnType<typeof setConfirming>\r\n\r\nconst setSelectedEmail = (email: string) => ({\r\n   type: SET_SELECTED_EMAIL,\r\n   payload: email,\r\n} as const)\r\ntype SetSelectedEmail = ReturnType<typeof setSelectedEmail>\r\n\r\n// thunks\r\n\r\nexport const getEmailConfirmation = (email: string) =>\r\n   (dispatch: ThunkDispatchType) => {\r\n      const message = `\r\n         <div style=\"background-color: lime; padding: 15px\">\t\r\n            password recovery link:\r\n            <a href='http://localhost:3000/memory-cards#/set-new-password/$token$'>\r\n            link</a>\r\n         </div>\r\n      `\r\n      dispatch(isFetchingAC(true))\r\n      authAPI.forgot({\r\n         email, // кому восстанавливать пароль\r\n         from: `<${email}>`, // можно указать разработчика фронта)\r\n         message: message,\r\n      }).then(res => {\r\n            if (res.data.success) {\r\n               dispatch(setConfirming(res.data.success))\r\n               dispatch(setSelectedEmail(email))\r\n            } else if (res.data.success) {\r\n               dispatch(errorAC('Oops...Something went wrong. Please try again later'))\r\n            }\r\n         },\r\n      ).catch(error => {\r\n         dispatch(errorAC(error.message))\r\n      }).finally(() => {\r\n         dispatch(isFetchingAC(false))\r\n      })\r\n   }\r\n\r\n// TYPES\r\n\r\ntype ActionsType\r\n   = SetConfirmingActionType\r\n   | SetSelectedEmail\r\n\r\ntype ThunkDispatchType = Dispatch<ActionsType | isFetchingACType | ErrorACType>\r\n","import {authAPI, RegistrationParamsType} from '../api/auth-api'\r\nimport {Dispatch} from 'redux'\r\nimport {errorAC, ErrorACType, isFetchingAC, isFetchingACType} from './request-reducer'\r\n\r\nconst initialState = {\r\n   isRegistered: false as boolean,\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const registrationReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n   switch (action.type) {\r\n      case 'REGISTRATION':\r\n         return {\r\n            ...state,\r\n            isRegistered: action.payload,\r\n         }\r\n\r\n      default:\r\n         return state\r\n   }\r\n}\r\n\r\n// actions\r\nexport const registrationAC = (payload: boolean) => ({type: 'REGISTRATION', payload} as const)\r\n\r\n// THUNK\r\nexport const registrationTC = (data: RegistrationParamsType) => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType>) => {\r\n   dispatch(isFetchingAC(true))\r\n   authAPI.registration(data)\r\n      .then(res => {\r\n         dispatch(isFetchingAC(false))\r\n         if (res.status === 201) {\r\n            dispatch(registrationAC(true))\r\n         } else {\r\n            dispatch(errorAC('Oops...Something went wrong. Please try again later'))\r\n         }\r\n      })\r\n      .catch((error) => {\r\n         dispatch(errorAC(error.message))\r\n         dispatch(isFetchingAC(false))\r\n      })\r\n}\r\n\r\n// TYPES\r\nexport type ActionsType = exampleACType\r\nexport type exampleACType = ReturnType<typeof registrationAC>\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__nA1Ui\"};","module.exports = __webpack_public_path__ + \"static/media/loader.aa8b6d13.svg\";","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    //baseURL: 'http://localhost:7542/2.0/',\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    withCredentials: true\r\n})","import {Dispatch} from 'redux'\r\nimport {authAPI, LoginParamsType, LoginResponseType} from '../api/auth-api'\r\nimport {errorAC, ErrorACType, isFetchingAC, isFetchingACType} from './request-reducer'\r\n\r\nconst initialState = {\r\n   isLoggedIn: false,\r\n   profile: {} as LoginResponseType,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const loginReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n   switch (action.type) {\r\n      case 'LOGIN':\r\n         return {...state, isLoggedIn: action.value}\r\n      case 'GET_USER_DATA':\r\n         return {...state, profile: action.profile}\r\n      case 'AUTH_ME':\r\n         return {...state, isLoggedIn: action.success}\r\n      default:\r\n         return state\r\n   }\r\n}\r\n\r\n// action creators\r\nexport const setIsLoggedInAC = (value: boolean) => ({type: 'LOGIN', value} as const)\r\nexport const getUserDataAC = (profile: LoginResponseType) => ({type: 'GET_USER_DATA', profile} as const)\r\nexport const authMeAC = (success: boolean) => ({type: 'AUTH_ME', success} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType | any>) => {\r\n   dispatch(isFetchingAC(true))\r\n   authAPI.login(data)\r\n      .then(res => {\r\n         dispatch(isFetchingAC(false))\r\n         if (res.status === 200) {\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(getUserDataAC(res.data))\r\n         } else {\r\n            dispatch(errorAC('Oops...Something went wrong. Please try again later'))\r\n            dispatch(setIsLoggedInAC(false))\r\n         }\r\n      })\r\n      .catch((error) => {\r\n         //dispatch(errorAC(error.response.data.error))\r\n         dispatch(isFetchingAC(false))\r\n      })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType | authSucessACType>) => {\r\n   dispatch(isFetchingAC(true))\r\n   authAPI.logout()\r\n       .then(res => {\r\n          dispatch(isFetchingAC(false))\r\n          dispatch(authMeAC(false))\r\n       })\r\n       .catch((error) => {\r\n          //dispatch(errorAC(error.response.data.error))\r\n          dispatch(isFetchingAC(false))\r\n       })\r\n}\r\n\r\nexport const authSucessTC = () => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType | authSucessACType>) => {\r\n    dispatch(isFetchingAC(true))\r\n    authAPI.authMe()\r\n        .then(res => {\r\n            dispatch(isFetchingAC(false))\r\n            dispatch(authMeAC(true))\r\n        })\r\n        .catch((error) => {\r\n            //dispatch(errorAC(error.response.data.error))\r\n            dispatch(isFetchingAC(false))\r\n        })\r\n}\r\n\r\n// TYPES\r\nexport type ActionsType = setIsLoggedInACType | getUserDataACType | authSucessACType\r\nexport type setIsLoggedInACType = ReturnType<typeof setIsLoggedInAC>\r\nexport type getUserDataACType = ReturnType<typeof getUserDataAC>\r\nexport type authSucessACType = ReturnType<typeof authMeAC>\r\n","import React from 'react'\r\nimport classes from './Login.module.scss'\r\nimport {NavLink, Redirect} from 'react-router-dom'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../reducers/store'\r\nimport {loginTC} from '../../reducers/login-reducer'\r\nimport {PROFILE, REGISTRATION, RESTORE_PASSWORD} from '../../route'\r\nimport Preloader from '../common/Preloader/Preloader'\r\nimport {useFormik} from 'formik'\r\nimport Input from '../common/Input/Input'\r\nimport Button from '../common/Button/Button'\r\nimport * as Yup from 'yup'\r\n\r\nconst validationSchema = () => Yup.object({\r\n   email: Yup.string()\r\n      .email('Invalid email address')\r\n      .required('Required'),\r\n   password: Yup.string()\r\n      .required('Required')\r\n      .min(8, 'Must be 8 characters or less'),\r\n})\r\n\r\nconst Login = () => {\r\n   const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n   const errorMsg = useSelector<AppRootStateType, string>(state => state.request.error)\r\n   const dispatch = useDispatch()\r\n\r\n   const formik = useFormik({\r\n      initialValues: {\r\n         email: '',\r\n         password: '',\r\n         rememberMe: false,\r\n      },\r\n      validationSchema,\r\n      onSubmit: values => {\r\n         dispatch(loginTC(values))\r\n      },\r\n   })\r\n\r\n   if (isLoggedIn) {\r\n      return <Redirect to={PROFILE}/>\r\n   }\r\n\r\n   return (\r\n      <div className={classes.container}>\r\n         <h1>Login</h1>\r\n         <form onSubmit={formik.handleSubmit}>\r\n\r\n            {errorMsg && <p><strong>{errorMsg}</strong></p>}\r\n\r\n            <div className={classes.formItem}>\r\n               <Input labelTitle={'Email'}\r\n                      error={formik.errors.email}\r\n                      {...formik.getFieldProps('email')}/>\r\n            </div>\r\n\r\n            <div className={classes.formItem}>\r\n               <Input type='password'\r\n                      labelTitle={'Password'}\r\n                      error={formik.errors.password}\r\n                      {...formik.getFieldProps('password')}/>\r\n            </div>\r\n\r\n            <div className={classes.formItem}>\r\n               <label htmlFor=\"password\">remember me</label>\r\n               <input\r\n                  type='checkbox'\r\n                  {...formik.getFieldProps('rememberMe')}/>\r\n            </div>\r\n\r\n            <Button type=\"submit\" labelTitle={'Send'}/>\r\n         </form>\r\n\r\n         <div className={classes.subLinks}>\r\n            <NavLink to={RESTORE_PASSWORD}>Forgot Password?</NavLink>\r\n            <NavLink to={REGISTRATION}>Registration</NavLink>\r\n         </div>\r\n\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default React.memo(Login)","import React from 'react';\r\nimport styles from './Profile.module.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../reducers/store\";\r\nimport {LoginResponseType} from \"../../api/auth-api\";\r\nimport {LOGIN, PACKS, PROFILE} from \"../../route\";\r\nimport {Link, Redirect} from \"react-router-dom\";\r\nimport {setIsLoggedInAC, logoutTC} from \"../../reducers/login-reducer\";\r\nimport Button from \"../common/Button/Button\";\r\n\r\nconst Profile = () => {\r\n\r\n    const userData = useSelector<AppRootStateType, LoginResponseType>(state => state.login.profile)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const setLogOut = () => {\r\n        dispatch(logoutTC())\r\n        dispatch(setIsLoggedInAC(false))\r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Profile</h1>\r\n            <h3>name: {userData.name}</h3>\r\n            <p>email: {userData.email}</p>\r\n            <p>publicCardPacksCount: {userData.publicCardPacksCount}</p>\r\n            <p><u><Link to={PACKS}>See my card packs</Link></u></p>\r\n            <div><img src={userData.avatar} alt={userData.name} width={200}/></div>\r\n            <Button onClick={setLogOut} labelTitle={'LogOut'}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(Profile)","import React from 'react'\r\nimport classes from './Navbar.module.scss'\r\nimport {NavLink} from 'react-router-dom'\r\nimport * as LINKS from '../../route'\r\n\r\nconst Navbar = () => {\r\n\r\n   React.useEffect(() => {\r\n      document.body.addEventListener('click', handleOutsideClick)\r\n   })\r\n\r\n   const [activeMenu, setActiveMenu] = React.useState<boolean>(false)\r\n\r\n   const menuRef = React.useRef<HTMLDivElement>(null)\r\n\r\n   const handleOutsideClick = (event: MouseEvent | any) => {\r\n      const path = event.path || (event.composedPath && event.composedPath()) // firefox uses composedPath\r\n      if (!path.includes(menuRef.current)) {\r\n         setActiveMenu(false)\r\n      }\r\n\r\n   }\r\n\r\n   const onClickSwitch = () => setActiveMenu(prevState => !prevState)\r\n   const onClickLink = () => setActiveMenu(false)\r\n\r\n   return (\r\n      <div className={classes.menu} ref={menuRef}>\r\n         <div className={classes.menuTitle}>Menu</div>\r\n         <div className={`${classes.switch} ${activeMenu ? classes.active : ''}`} onClick={onClickSwitch}>\r\n            <div className={classes.switchLine}></div>\r\n            <div className={classes.switchLine}></div>\r\n            <div className={classes.switchLine}></div>\r\n         </div>\r\n         <nav className={classes.navbar}>\r\n            <NavLink to={LINKS.LOGIN} activeClassName={classes.activeLink} onClick={onClickLink}>login</NavLink>\r\n            <NavLink to={LINKS.PROFILE} activeClassName={classes.activeLink} onClick={onClickLink}>profile</NavLink>\r\n            <NavLink to={LINKS.PACKS} activeClassName={classes.activeLink} onClick={onClickLink}>card packs</NavLink>\r\n            <NavLink to={LINKS.REGISTRATION} activeClassName={classes.activeLink} onClick={onClickLink}>registration</NavLink>\r\n            <NavLink to={LINKS.RESTORE_PASSWORD} activeClassName={classes.activeLink} onClick={onClickLink}>restore password</NavLink>\r\n         </nav>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default React.memo(Navbar)\r\n","import React from 'react'\r\nimport classes from './Header.module.scss'\r\nimport Navbar from '../Navbar/Navbar'\r\n\r\nconst Header = () => {\r\n   return (\r\n      <header className={classes.header}>\r\n         <div className={classes.container}>\r\n            <div>Logo</div>\r\n            <Navbar/>\r\n         </div>\r\n      </header>\r\n   )\r\n}\r\n\r\nexport default React.memo(Header)\r\n","import {instance} from \"./api\";\r\nimport {EditCardModelType} from \"../reducers/cards-reducer\";\r\n\r\n\r\nexport const cardsAPI = {\r\n    getCards(cardsPack_id: string) {\r\n        return instance.get<CardsResponseType>(`cards/card?cardsPack_id=${cardsPack_id}&pageCount=20`)\r\n    },\r\n    addCard(cardsPack_id: string, question: string, answer: string) {\r\n        return instance.post<AddCardResponseType>(`cards/card`, {\r\n            card: {cardsPack_id, question, answer}\r\n        })\r\n    },\r\n\r\n    editCard(_id: string, model: EditCardModelType) {\r\n        return instance.put<CardsResponseType>(`cards/card`, {\r\n            card: {\r\n                _id: _id,\r\n                question: model.question,\r\n                answer: model.answer\r\n            }\r\n        })\r\n    },\r\n    removeCard(_id: string) {\r\n        return instance.delete<CardsResponseType>(`cards/card?id=${_id}`)\r\n    },\r\n}\r\n\r\nexport type CardsResponseType = {\r\n    getCards: Array<CardsType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n}\r\n\r\nexport type AddCardResponseType = {\r\n    newCard: NewCardType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\nexport type NewCardType = {\r\n    answer: string\r\n    cardsPack_id: string\r\n    comments: string\r\n    created: string\r\n    grade: number\r\n    more_id: string\r\n    question: string\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    updated: string\r\n    user_id: string\r\n    __v: number\r\n    _id: string\r\n}\r\n\r\nexport type CardsType = {\r\n    answer: string\r\n    question: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    user_id: string\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    _id: string\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {ErrorACType, isFetchingAC, isFetchingACType} from \"./request-reducer\";\r\nimport {cardsAPI, CardsType, NewCardType} from \"../api/cards-api\";\r\n\r\nlet initialState = {\r\n    getCards: [] as CardsType[],\r\n    cardsTotalCount: 0,\r\n    maxGrade: 0,\r\n    minGrade: 0,\r\n    page: 0,\r\n    pageCount: 0\r\n}\r\n\r\nexport const cardsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_CARDS':\r\n            return {...state, getCards: action.getCards}\r\n        case 'ADD_CARD':\r\n            return {...state, getCards: [action.newCard, ...state.getCards]}\r\n        case 'REMOVE_CARD':\r\n            return {...state, getCards: state.getCards.filter((c) => c._id != action._id)}\r\n        case 'EDIT_CARD':\r\n            return {\r\n                ...state,\r\n                getCards: state.getCards.map(p => p._id === action.card_id ? {...p, ...action.model} : p)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// AC\r\nexport const setCardsAC = (getCards: CardsType[]) => ({type: 'SET_CARDS', getCards} as const)\r\nexport const addCardAC = (newCard: NewCardType) => ({type: 'ADD_PACK', newCard} as const)\r\nexport const removeCardAC = (_id: string) => ({type: 'REMOVE_CARD', _id} as const)\r\nexport const editCardAC = (card_id: string, model: EditCardModelType) => ({type: 'EDIT_CARD', card_id, model} as const)\r\n\r\n// thunks\r\nexport const getCardsTC = (cardsPack_id: string) => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType>) => {\r\n    dispatch(isFetchingAC(true))\r\n    cardsAPI.getCards(cardsPack_id)\r\n        .then(res => {\r\n            dispatch(isFetchingAC(false))\r\n            dispatch(setCardsAC(res.data.getCards))\r\n        })\r\n        .catch((error) => {\r\n            //dispatch(errorAC(error.response.data.error))\r\n            dispatch(isFetchingAC(false))\r\n        })\r\n}\r\n\r\nexport const addCardTC = (cardsPack_id: string, question: string, answer: string) => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType>) => {\r\n    dispatch(isFetchingAC(true))\r\n    cardsAPI.addCard(cardsPack_id, question, answer)\r\n        .then(res => {\r\n            dispatch(isFetchingAC(false))\r\n            dispatch(addCardAC(res.data.newCard))\r\n            dispatch(getCardsTC(cardsPack_id))\r\n        })\r\n        .catch((error) => {\r\n            console.log(error.response.data.error)\r\n            dispatch(isFetchingAC(false))\r\n        })\r\n}\r\n\r\nexport const removeCardTC = (_id: string, cardsPack_id: string) => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType>) => {\r\n    dispatch(isFetchingAC(true))\r\n    cardsAPI.removeCard(_id)\r\n        .then(res => {\r\n            dispatch(isFetchingAC(false))\r\n            dispatch(removeCardAC(_id))\r\n            dispatch(getCardsTC(cardsPack_id))\r\n        })\r\n        .catch((error) => {\r\n            console.log(error.response.data.error)\r\n            dispatch(isFetchingAC(false))\r\n        })\r\n}\r\n\r\nexport const editCardTC = (card_id: string, model: EditCardModelType, cardsPack_id: string) => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType>) => {\r\n    dispatch(isFetchingAC(true))\r\n    cardsAPI.editCard(card_id, model)\r\n        .then(res => {\r\n            dispatch(isFetchingAC(false))\r\n            editCardAC(card_id, model)\r\n            dispatch(getCardsTC(cardsPack_id))\r\n        })\r\n        .catch((error) => {\r\n            console.log(error.response.data.error)\r\n            dispatch(isFetchingAC(false))\r\n        })\r\n}\r\n\r\n\r\ntype InitialStateType = {\r\n    getCards: Array<CardsType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n}\r\n\r\ntype ActionsType = setCardsACType | addCardACType | RemoveCardType | any\r\n\r\n\r\nexport type setCardsACType = ReturnType<typeof setCardsAC>\r\nexport type addCardACType = ReturnType<typeof addCardAC>\r\nexport type RemoveCardType = ReturnType<typeof removeCardAC>\r\n\r\n\r\nexport type EditCardModelType = {\r\n    question?: string\r\n    answer?: string\r\n}\r\n\r\n\r\n","import React, {useEffect} from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../reducers/store\";\r\nimport {addCardTC, EditCardModelType, editCardTC, getCardsTC, removeCardTC} from \"../../reducers/cards-reducer\";\r\nimport {CardsType} from \"../../api/cards-api\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport Button from \"../common/Button/Button\";\r\nimport classes from './Cards.module.scss';\r\n\r\nconst Cards = () => {\r\n\r\n    const cards = useSelector<AppRootStateType, Array<CardsType>>(state => state.cards.getCards)\r\n    const {cardId} = useParams();\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getCardsTC(cardId))\r\n    }, [])\r\n\r\n    const removeCard = (_id: string) => {\r\n        dispatch(removeCardTC(_id, cardId))\r\n    }\r\n\r\n    const addCard = (question: string, answer: string) => {\r\n        dispatch(addCardTC(cardId, question, answer))\r\n    }\r\n\r\n    const editCard = (card_id: string, model: EditCardModelType) => {\r\n        dispatch(editCardTC(card_id, model, cardId))\r\n    }\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <h1>Cards</h1>\r\n            <Button\r\n                labelTitle={'Add new Pack'}\r\n                onClick={() => addCard('???', '!!!')}\r\n            />\r\n            <div className={classes.table}>\r\n                <div className={`${classes.tableHeader} ${classes.tableRow}`}>\r\n                    <div><strong>Question</strong></div>\r\n                    <div><strong>Answer</strong></div>\r\n                    <div><strong>Actions</strong></div>\r\n                </div>\r\n\r\n                {cards && cards.map(c => <div key={c._id} className={classes.tableRow}>\r\n                        <div>{c.question}</div>\r\n                        <div>{c.answer}</div>\r\n                        <div>\r\n                            <Button labelTitle={'Edit'}\r\n                                    onClick={() => editCard(c._id, {question: 'New Question', answer: 'New Answer'})}/>\r\n                            <Button labelTitle={'Delete'} onClick={() => removeCard(c._id)}/></div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;\r\n\r\n","import {instance} from \"./api\";\r\nimport {EditCardPackType} from \"../reducers/pack-reducer\";\r\n\r\n\r\nexport const packAPI = {\r\n    getCardPacksUser(user_id: string) {\r\n        return instance.get<CardsPackResponseType>(`cards/pack?user_id=${user_id}&pageCount=20`)\r\n    },\r\n    getCardPacksAll() {\r\n        return instance.get<CardsPackResponseType>(`cards/pack`)\r\n    },\r\n    addCardPack(name: string) {\r\n        return instance.post<NewCardsPackResponseType>(`cards/pack`, {\r\n            cardsPack: {\r\n                name: name\r\n            }\r\n        })\r\n    },\r\n    editCardPack(_id: string, model: EditCardPackType) {\r\n        return instance.put<NewCardsPackResponseType>(`cards/pack`, {\r\n            cardsPack: {\r\n                _id: _id,\r\n                name: model.name,\r\n                private: model.private,\r\n                rating: model.rating\r\n            }\r\n        })\r\n    },\r\n    removeCardPack(pack_id: string) {\r\n        return instance.delete<CardsPackResponseType>(`cards/pack?id=${pack_id}`)\r\n    },\r\n}\r\n\r\n\r\nexport type CardsPackResponseType = {\r\n    cardPacks: Array<CardsPackType>\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\n\r\n\r\nexport type NewCardsPackResponseType = {\r\n    newCardsPack: newCardsType\r\n}\r\n\r\nexport type newCardsType = {\r\n    cardsCount: number\r\n    created: string\r\n    //deckCover: string\r\n    grade: number\r\n    more_id: string\r\n    name: string\r\n    path: string\r\n    private: boolean\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    updated: string\r\n    user_id: string\r\n    user_name: string\r\n    __v: number\r\n    _id: string\r\n}\r\n\r\nexport type CardsPackType = {\r\n    cardsCount: number\r\n    created: string\r\n    //deckCover: string\r\n    grade: number\r\n    more_id: string\r\n    name: string\r\n    path: string\r\n    private: boolean\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    updated: string\r\n    user_id: string\r\n    user_name: string\r\n    __v: number\r\n    _id: string\r\n}","import {Dispatch} from \"redux\";\r\nimport {ErrorACType, isFetchingAC, isFetchingACType} from \"./request-reducer\";\r\nimport {CardsPackType, packAPI} from \"../api/pack-api\";\r\n\r\nlet initialState = {\r\n    cardPacks: [] as CardsPackType[],\r\n    cardPacksTotalCount: 0,\r\n    maxCardsCount: 0,\r\n    minCardsCount: 0,\r\n    page: 0,\r\n    pageCount: 0,\r\n    token: '',\r\n    tokenDeathTime: 0\r\n}\r\n\r\n\r\nexport const packReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_PACKS':\r\n            return {...state, cardPacks: action.cardPacks}\r\n        case 'REMOVE_PACK':\r\n            return {...state, cardPacks: state.cardPacks.filter((pack) => pack._id != action._id)}\r\n        case 'ADD_PACK':\r\n            return {...state, cardPacks: [action.newPack, ...state.cardPacks]}\r\n        case 'EDIT_PACK':\r\n            return {\r\n                ...state,\r\n                cardPacks: state.cardPacks.map(p => p._id === action.pack_id ? {...p, ...action.model} : p)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n// AC\r\nexport const setPacksAC = (cardPacks: CardsPackType[]) => ({type: 'SET_PACKS', cardPacks} as const)\r\nexport const removePackAC = (_id: string) => ({type: 'REMOVE_PACK', _id} as const)\r\nexport const addPackAC = (newPack: CardsPackType) => ({type: 'ADD_PACK', newPack} as const)\r\nexport const editPackAC = (pack_id: string, model: EditCardPackType) => ({type: 'EDIT_PACK', pack_id, model} as const)\r\n\r\n// thunks\r\nexport const getPackTC = (user_id: string) => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType>) => {\r\n    dispatch(isFetchingAC(true))\r\n    packAPI.getCardPacksUser(user_id)\r\n        .then(res => {\r\n            dispatch(isFetchingAC(false))\r\n            dispatch(setPacksAC(res.data.cardPacks))\r\n        })\r\n        .catch((error) => {\r\n            //dispatch(errorAC(error.response.data.error))\r\n            dispatch(isFetchingAC(false))\r\n        })\r\n}\r\n\r\nexport const removePackTC = (_id: string, user_id: string) => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType>) => {\r\n    dispatch(isFetchingAC(true))\r\n    packAPI.removeCardPack(_id)\r\n        .then(res => {\r\n            dispatch(isFetchingAC(false))\r\n            dispatch(removePackAC(_id))\r\n            dispatch(getPackTC(user_id))\r\n        })\r\n        .catch((error) => {\r\n            console.log(error.response.data.error)\r\n            dispatch(isFetchingAC(false))\r\n        })\r\n}\r\n\r\nexport const addPackTC = (name: string, user_id: string) => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType>) => {\r\n    dispatch(isFetchingAC(true))\r\n    packAPI.addCardPack(name)\r\n        .then(res => {\r\n            dispatch(isFetchingAC(false))\r\n            dispatch(addPackAC(res.data.newCardsPack))\r\n            dispatch(getPackTC(user_id))\r\n        })\r\n        .catch((error) => {\r\n            console.log(error.response.data.error)\r\n            dispatch(isFetchingAC(false))\r\n        })\r\n}\r\n\r\nexport const editPackTC = (pack_id: string, model: EditCardPackType, user_id: string) => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType>) => {\r\n    dispatch(isFetchingAC(true))\r\n    packAPI.editCardPack(pack_id, model)\r\n        .then(res => {\r\n            dispatch(isFetchingAC(false))\r\n            editPackAC(pack_id, model)\r\n            dispatch(getPackTC(user_id))\r\n        })\r\n        .catch((error) => {\r\n            console.log(error.response.data.error)\r\n            dispatch(isFetchingAC(false))\r\n        })\r\n}\r\n\r\n\r\ntype InitialStateType = {\r\n    cardPacks: CardsPackType[]\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\n\r\nexport type EditCardPackType = {\r\n    name?: string\r\n    private?: boolean\r\n    rating?: number\r\n}\r\n\r\ntype ActionsType = setPacksACType | removePackACType | addPackACType | editPackACType | any\r\n\r\n\r\nexport type setPacksACType = ReturnType<typeof setPacksAC>\r\nexport type removePackACType = ReturnType<typeof removePackAC>\r\nexport type addPackACType = ReturnType<typeof addPackAC>\r\nexport type editPackACType = ReturnType<typeof editPackAC>\r\n\r\n\r\n","import React from 'react'\r\nimport styles from './Preloader.module.css'\r\nimport preloader from '../../../assets/images/loader.svg'\r\n\r\nconst Preloader = () => {\r\n   return (\r\n      <div className={styles.wrapper}>\r\n         <img src={preloader} className={styles.img} alt='loader'/>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default React.memo(Preloader)\r\n","import React, {useEffect} from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../reducers/store\";\r\nimport {addPackTC, EditCardPackType, editPackTC, getPackTC, removePackTC} from \"../../reducers/pack-reducer\";\r\nimport Button from \"../common/Button/Button\";\r\nimport {CardsPackType} from \"../../api/pack-api\";\r\nimport {Link, Redirect} from 'react-router-dom'\r\nimport {LOGIN} from \"../../route\";\r\nimport classes from './Packs.module.scss'\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\n\r\nconst Packs = () => {\r\n    const requestIsFetching = useSelector<AppRootStateType, boolean>(state => state.request.isFetching)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    const cardPacks = useSelector<AppRootStateType, Array<CardsPackType>>(state => state.packs.cardPacks)\r\n    const user_id = useSelector<AppRootStateType, string>(state => state.login.profile._id)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getPackTC(user_id))\r\n    }, [])\r\n\r\n    const removePack = (_id: string) => {\r\n        dispatch(removePackTC(_id, user_id))\r\n    }\r\n\r\n    const addPack = (name: string) => {\r\n        dispatch(addPackTC(name, user_id))\r\n    }\r\n\r\n    const editPack = (pack_id: string, model: EditCardPackType) => {\r\n        dispatch(editPackTC(pack_id, model, user_id))\r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={LOGIN}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            {requestIsFetching && <Preloader/>}\r\n            <h1>Packs </h1>\r\n            <Button\r\n                labelTitle={'Add new Pack'}\r\n                onClick={() => addPack('New super pack')}\r\n            />\r\n            <div className={classes.table}>\r\n                <div className={`${classes.tableHeader} ${classes.tableRow}`}>\r\n                    <div><strong>Name</strong></div>\r\n                    <div><strong>Show pack cards</strong></div>\r\n                    <div><strong>Actions</strong></div>\r\n                </div>\r\n\r\n                {cardPacks.map((pack) => {\r\n                    return (\r\n                        <div key={pack._id} className={classes.tableRow}>\r\n                            <div>{pack.name}</div>\r\n                            <div><Link to={`/cards/${pack._id}`}><Button labelTitle={'Show cards'}/></Link></div>\r\n                            <div>\r\n                                <Button labelTitle={'Edit'} onClick={() => editPack(pack._id, {name: 'new mane', private: true})}/>\r\n                                <Button labelTitle={'Delete'} onClick={() => removePack(pack._id)}/></div>\r\n                        </div>\r\n\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Packs;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {Suspense} from 'react'\r\nimport './App.css'\r\nimport {Route, Switch} from 'react-router-dom'\r\nimport * as paths from './route'\r\nimport Login from './components/Login/Login'\r\nimport Profile from './components/Profile/Profile'\r\nimport Header from './components/Header/Header'\r\nimport Cards from \"./components/Cards/Cards\";\r\nimport Packs from \"./components/Packs/Packs\";\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from \"./reducers/store\";\r\nimport {authSucessTC} from './reducers/login-reducer'\r\nimport {Preloader} from './components/common'\r\n\r\nconst Registration = React.lazy(() => import('./components/Registration/Registration'))\r\nconst RestorePassword = React.lazy(() => import('./components/RestorePassword/RestorePassword'))\r\nconst NewPassword = React.lazy(() => import('./components/NewPassword/NewPassword'))\r\nconst NotFound = React.lazy(() => import('./components/NotFound/NotFound'))\r\n\r\nfunction App() {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    const requestIsFetching = useSelector<AppRootStateType, boolean>(state => state.request.isFetching)\r\n    const dispatch = useDispatch();\r\n\r\n/*    React.useEffect(() => {\r\n        dispatch(authSucessTC())\r\n    }, [])*/\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {requestIsFetching && <Preloader/>}\r\n            <Header/>\r\n            <div className=\"content\">\r\n                <Suspense fallback={<Preloader/>}>\r\n                    <Switch>\r\n                        <Route exact path='/' render={() => isLoggedIn ? <Profile/> : <Login/>}/>\r\n                        <Route path={paths.LOGIN} render={() => <Login/>}/>\r\n                        <Route path={paths.PROFILE} render={() => <Profile/>}/>\r\n                        <Route path={paths.PACKS} render={() => <Packs/>}/>\r\n                        <Route path={paths.CARDS} render={() => <Cards/>}/>\r\n\r\n                        <Route path={paths.REGISTRATION} render={() => <Registration/>}/>\r\n                        <Route path={paths.RESTORE_PASSWORD} render={() => <RestorePassword/>}/>\r\n                        <Route path={paths.NEW_PASSWORD} render={() => <NewPassword/>}/>\r\n\r\n                        <Route component={NotFound}/>\r\n                    </Switch>\r\n                </Suspense>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React, {DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport classes from './Checkbox.module.scss'\r\n\r\ntype CheckboxPropsType\r\n   = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n   & {labelTitle?: string}\r\n\r\nconst Checkbox = (props: CheckboxPropsType) => {\r\n   const {labelTitle, ...restProps} = props\r\n   return (\r\n      <label className={classes.label}>\r\n         {labelTitle && <span className={classes.label}>{labelTitle}</span>}\r\n         <input {...restProps}\r\n                type=\"checkbox\"\r\n                className={classes.checkbox}/>\r\n         <div className={classes.customCheckbox}></div>\r\n      </label>\r\n   )\r\n}\r\n\r\nexport default React.memo(Checkbox)\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {loginReducer} from \"./login-reducer\";\r\nimport {newPswReducer} from \"./newPassword-reducer\";\r\nimport {restorePswReducer} from \"./restorePassword-reducer\";\r\nimport {registrationReducer} from \"./registration-reducer\";\r\nimport {requestReducer} from \"./request-reducer\";\r\nimport {packReducer} from \"./pack-reducer\";\r\nimport {cardsReducer} from \"./cards-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    login: loginReducer,\r\n    newPsw: newPswReducer,\r\n    restorePsw: restorePswReducer,\r\n    registration: registrationReducer,\r\n    request: requestReducer,\r\n    packs: packReducer,\r\n    cards: cardsReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from \"./reducers/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <HashRouter>\r\n                <App/>\r\n            </HashRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport classes from './Button.module.scss'\r\n\r\ntype InputPropsType\r\n    = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n    & { labelTitle?: string};\r\n\r\nconst Button = (props: InputPropsType) => {\r\n    const {labelTitle, ...restProps} = props\r\n    return (\r\n        <button className={classes.btn} {...restProps}> {props.labelTitle}</button>\r\n    )\r\n}\r\n\r\nexport default React.memo(Button)\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Navbar_menu__Mhcmp\",\"menuTitle\":\"Navbar_menuTitle__19_Im\",\"switch\":\"Navbar_switch__1pOjJ\",\"active\":\"Navbar_active__1XbSl\",\"navbar\":\"Navbar_navbar__3Queb\",\"activeLink\":\"Navbar_activeLink__15t2E\"};","import {instance} from './api'\r\n\r\n\r\nexport const authAPI = {\r\n   login: (data: LoginParamsType) =>\r\n      instance.post<LoginResponseType>('auth/login', data),\r\n   authMe: () =>\r\n      instance.post<LoginResponseType>('auth/me'),\r\n   logout: () =>\r\n      instance.delete<LoginResponseType>('auth/me'),\r\n   forgot: (data: ForgotParamsType) =>\r\n      instance.post<ForgotResponseType>('auth/forgot', data),\r\n   sendNewPassword: (data: NewPasswordParamsType) =>\r\n      instance.post<NewPasswordResponseType>('auth/set-new-password', data),\r\n   registration: (data: RegistrationParamsType) =>\r\n      instance.post<RegistrationResponseType>('auth/register', data),\r\n}\r\n\r\n// TYPES\r\n\r\nexport type LoginParamsType = {\r\n   password: string,\r\n   email: string,\r\n   rememberMe: boolean,\r\n}\r\n\r\nexport type LoginResponseType = {\r\n   _id: string,\r\n   email: string,\r\n   name: string,\r\n   avatar?: string,\r\n   publicCardPacksCount: number, // количество колод\r\n\r\n   created: string,\r\n   updated: string,\r\n   isAdmin: boolean,\r\n   verified: boolean, // подтвердил ли почту\r\n   rememberMe: boolean,\r\n\r\n   error: string,\r\n}\r\n\r\nexport type AddedUserType = {\r\n   email: string,\r\n   isAdmin: boolean,\r\n   __v: number,\r\n   _id: string,\r\n}\r\n\r\nexport type RegistrationResponseType = {\r\n   addedUser: AddedUserType,\r\n   success: boolean,\r\n}\r\n\r\n// export type LoginResponseErrorType = {\r\n//    body: LoginParamsType,\r\n//    error: string,\r\n//    method: string,\r\n//    query: {},\r\n//    url: string,\r\n// }\r\n\r\nexport type ForgotParamsType = {\r\n   email: string,\r\n   from: string,\r\n   message: string,\r\n}\r\n\r\nexport type ForgotResponseType = {\r\n   answer: boolean,\r\n   html: boolean,\r\n   info: string,\r\n   success: boolean,\r\n}\r\n\r\nexport type NewPasswordParamsType = {\r\n   password: string,\r\n   resetPasswordToken: string,\r\n}\r\n\r\nexport type NewPasswordResponseType = {\r\n   info: string,\r\n}\r\n\r\nexport type RegistrationParamsType = {\r\n   email: string,\r\n   password: string,\r\n   repeatPassword?: string,\r\n}\r\n\r\nexport type FormErrorType = {\r\n   email?: string,\r\n   password?: string,\r\n   repeatPassword?: string,\r\n   rememberMe?: boolean,\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Input_label__jOF-3\",\"error\":\"Input_error__39qKP\",\"errorMessage\":\"Input_errorMessage__3ysst\",\"showPassword\":\"Input_showPassword__2oNMr\",\"input\":\"Input_input__1VWGP\"};","import React from 'react'\r\nimport {findIconDefinition, IconDefinition, IconLookup} from '@fortawesome/fontawesome-svg-core'\r\nimport {library} from '@fortawesome/fontawesome-svg-core'\r\nimport {fas} from '@fortawesome/free-solid-svg-icons'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\n\r\nlibrary.add(fas)\r\n\r\nconst iconDefinition = (iconName: any, pref?: any): IconDefinition => {\r\n   const prefix = pref ? pref : 'fas'\r\n   const Lookup: IconLookup = {prefix: prefix, iconName: iconName}\r\n   return findIconDefinition(Lookup)\r\n}\r\n\r\n// создаете новую иконку с именем из каталога https://fontawesome.com/icons (только free)\r\nconst SignInAlt = () => <FontAwesomeIcon icon={iconDefinition('sign-in-alt')}/>\r\nconst SignOutAlt = () => <FontAwesomeIcon icon={iconDefinition('sign-out-alt')}/>\r\nconst Key = () => <FontAwesomeIcon icon={iconDefinition('key')}/>\r\nconst Lock = () => <FontAwesomeIcon icon={iconDefinition('lock')}/>\r\nconst Error = () => <FontAwesomeIcon icon={iconDefinition('exclamation-circle')}/>\r\nconst Eye = () => <FontAwesomeIcon icon={iconDefinition('eye')}/>\r\nconst EyeSlash = () => <FontAwesomeIcon icon={iconDefinition('eye-slash')}/>\r\nconst SearchLocation = () => <FontAwesomeIcon icon={iconDefinition('search-location')}/>\r\n\r\n// добавляете в этот объект\r\nconst Icons = {\r\n   SignInAlt,\r\n   SignOutAlt,\r\n   Key,\r\n   Lock,\r\n   Error,\r\n   Eye,\r\n   EyeSlash,\r\n   SearchLocation,\r\n}\r\n\r\nexport default Icons\r\n// в таком виде вставляете в разметку: { Icons.coffee() }\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Login_container__1dhzn\",\"formItem\":\"Login_formItem__1I2Ut\",\"subLinks\":\"Login_subLinks__3-Xeg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3jJh8\",\"table\":\"Cards_table__1OEYJ\",\"tableRow\":\"Cards_tableRow__nwf7S\",\"tableHeader\":\"Cards_tableHeader__1Rk_X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Packs_container__2Uv5c\",\"table\":\"Packs_table__1SSVS\",\"tableRow\":\"Packs_tableRow__1yRlX\",\"tableHeader\":\"Packs_tableHeader__kNgj8\"};","import React, {DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport classes from './Input.module.scss'\r\nimport Icons from '../Icons/Icons'\r\n\r\ntype InputPropsType\r\n   = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n   & { labelTitle?: string, error?: string }\r\n\r\nconst Input = (props: InputPropsType) => {\r\n\r\n   const [showPassword, setShowPassword] = React.useState<boolean>(false)\r\n\r\n   const handleShowPassword = () => {\r\n      setShowPassword(prevState => !prevState)\r\n   }\r\n\r\n   const {labelTitle, error, ...restProps} = props\r\n   const type = props.type === 'password' && !showPassword ? 'password' : 'text'\r\n\r\n   return (\r\n      <label className={classes.label}>\r\n         {labelTitle && <span className={classes.label}>{labelTitle}</span>}\r\n         <input {...restProps} type={type} className={`${classes.input} ${props.className}`}/>\r\n         {\r\n            type === 'password' &&\r\n               <div className={classes.showPassword} onClick={handleShowPassword}>\r\n                  {Icons.Eye()}\r\n               </div>\r\n         }\r\n         {\r\n            showPassword &&\r\n            <div className={classes.showPassword} onClick={handleShowPassword}>\r\n               {Icons.EyeSlash()}\r\n            </div>\r\n         }\r\n         {\r\n            error &&\r\n               <div className={classes.error}>\r\n                  {Icons.Error()}\r\n                  <div className={classes.errorMessage}>{error}</div>\r\n               </div>\r\n         }\r\n      </label>\r\n   )\r\n}\r\n\r\nexport default React.memo(Input)\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Checkbox_label__1q_k8\",\"checkbox\":\"Checkbox_checkbox__2d-7_\",\"customCheckbox\":\"Checkbox_customCheckbox__KijXE\"};","export const LOGIN = '/login';\r\nexport const NEW_PASSWORD = '/set-new-password/:token?'\r\nexport const PROFILE = '/profile'\r\nexport const REGISTRATION = '/registration'\r\nexport const RESTORE_PASSWORD = '/restore-password'\r\nexport const CARDS = '/cards/:cardId?'\r\nexport const PACKS = '/packs'","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__Wf4ao\",\"container\":\"Header_container__38qBT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Preloader_wrapper__SnQP1\",\"img\":\"Preloader_img__qADR8\"};"],"sourceRoot":""}