{"version":3,"sources":["reducers/request-reducer.ts","reducers/newPassword-reducer.ts","reducers/restorePassword-reducer.ts","reducers/registration-reducer.ts","components/common/Button/Button.module.scss","assets/images/loader.svg","api/api.ts","components/common/Button/Button.tsx","reducers/login-reducer.ts","components/Login/Login.tsx","components/Profile/Profile.tsx","components/Navbar/Navbar.tsx","components/Header/Header.tsx","api/cards-api.ts","reducers/cards-reducer.ts","components/Cards/Cards.tsx","api/pack-api.ts","reducers/pack-reducer.ts","components/common/Preloader/Preloader.tsx","components/common/Range/Range.tsx","components/Search/Search.tsx","components/Packs/Packs.tsx","App.tsx","components/common/Checkbox/Checkbox.tsx","serviceWorker.ts","reducers/store.ts","index.tsx","components/Navbar/Navbar.module.scss","api/auth-api.ts","components/common/Input/Input.module.scss","components/common/Input/Input.tsx","components/common/Icons/Icons.tsx","components/Login/Login.module.scss","components/Cards/Cards.module.scss","components/Packs/Packs.module.scss","components/common/Checkbox/Checkbox.module.scss","route.ts","components/Header/Header.module.scss","components/common/Preloader/Preloader.module.css","components/Search/Search.module.scss"],"names":["initialState","error","isFetching","requestReducer","state","action","type","errorAC","isFetchingAC","success","newPswReducer","payload","setResult","value","setNewPassword","password","token","dispatch","authAPI","sendNewPassword","resetPasswordToken","then","res","status","catch","message","finally","selectedEmail","restorePswReducer","getEmailConfirmation","email","forgot","from","data","setSelectedEmail","isRegistered","registrationReducer","registrationTC","registration","module","exports","instance","axios","create","baseURL","withCredentials","React","memo","props","labelTitle","restProps","className","classes","btn","isLoggedIn","profile","setIsLoggedInAC","getUserDataAC","authMeAC","validationSchema","Yup","required","min","useSelector","login","errorMsg","request","useDispatch","formik","useFormik","initialValues","rememberMe","onSubmit","values","to","PROFILE","container","handleSubmit","formItem","Input","errors","getFieldProps","htmlFor","Button","subLinks","RESTORE_PASSWORD","REGISTRATION","userData","useEffect","handleAuth","a","authMe","name","publicCardPacksCount","PACKS","src","avatar","alt","width","onClick","logout","LOGIN","document","body","addEventListener","handleOutsideClick","useState","activeMenu","setActiveMenu","menuRef","useRef","event","path","composedPath","includes","current","onClickLink","menu","ref","menuTitle","switch","active","prevState","switchLine","navbar","LINKS","activeClassName","activeLink","header","cardsAPI","cardsPack_id","get","question","answer","post","card","_id","model","put","delete","cards","cardsTotalCount","maxGrade","minGrade","page","pageCount","getCardsTC","Cards","cardId","useParams","removeCard","removeCardAC","console","log","response","removeCardTC","addCard","newCard","addCardTC","editCard","card_id","editCardTC","table","tableHeader","tableRow","map","c","key","packAPI","user_id","cardsPack","private","rating","pack_id","searchName","max","cardPacks","cardPacksTotalCount","packName","maxCardsCount","minCardsCount","tokenDeathTime","setPacksAC","getPackTC","styles","wrapper","preloader","img","CardsCountRange","packs","setValues","setValuesCardsCount","newValues","setMinMAxCardsCountAC","step","onChange","renderTrack","children","onMouseDown","onTouchStart","style","height","display","margin","borderRadius","background","getTrackBackground","colors","alignSelf","renderThumb","index","isDragged","backgroundColor","boxShadow","position","top","color","fontWeight","fontSize","fontFamily","padding","toFixed","Search","search","search_item","e","newSearchName","currentTarget","getState","Packs","requestIsFetching","removePack","removePackAC","removePackTC","addPack","newPack","newCardsPack","addPackTC","editPack","editPackTC","pack","Registration","label","checkbox","customCheckbox","lazy","RestorePassword","NewPassword","NotFound","App","fallback","exact","render","paths","component","Boolean","window","location","hostname","match","rootReducer","combineReducers","newPsw","restorePsw","filter","p","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","unregister","showPassword","setShowPassword","handleShowPassword","input","Icons","Eye","EyeSlash","Error","errorMessage","library","add","fas","iconDefinition","iconName","pref","Lookup","prefix","findIconDefinition","SignInAlt","icon","SignOutAlt","Key","Lock","SearchLocation","NEW_PASSWORD","CARDS"],"mappings":"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","file":"static/js/main.0045556c.chunk.js","sourcesContent":["let initialState = {\r\n   error: '',\r\n   isFetching: false,\r\n}\r\n\r\nexport type InitialState = typeof initialState\r\n\r\nexport const requestReducer = (state: InitialState = initialState, action: InitReducerActionsType) => {\r\n   switch (action.type) {\r\n      case 'REQUEST_ERROR':\r\n         return {...state, error: action.error}\r\n      case 'REQUEST_IS_FETCHING':\r\n         return {...state, isFetching: action.isFetching}\r\n      default:\r\n         return state\r\n   }\r\n}\r\n\r\nexport const errorAC = (error: string) => ({type: 'REQUEST_ERROR', error} as const)\r\nexport const isFetchingAC = (isFetching: boolean) => ({type: 'REQUEST_IS_FETCHING', isFetching} as const)\r\n\r\n\r\n// TYPES\r\nexport type ErrorACType = ReturnType<typeof errorAC>\r\nexport type isFetchingACType = ReturnType<typeof isFetchingAC>\r\ntype InitReducerActionsType = ErrorACType | isFetchingACType\r\n","import {Dispatch} from 'redux'\r\nimport {authAPI} from '../api/auth-api'\r\nimport {errorAC, ErrorACType, isFetchingAC, isFetchingACType} from './request-reducer'\r\n\r\nconst SET_RESULT = 'SET_RESULT'\r\n\r\nconst initialState = {\r\n   success: null as null | boolean,\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const newPswReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n   switch (action.type) {\r\n      case 'SET_RESULT':\r\n         return {\r\n            ...state,\r\n            success: action.payload,\r\n         }\r\n      default:\r\n         return state\r\n   }\r\n}\r\n\r\n// actions\r\n\r\nexport const setResult = (value: boolean) => ({\r\n   type: SET_RESULT,\r\n   payload: value,\r\n} as const)\r\ntype SetResultActionType = ReturnType<typeof setResult>\r\n\r\n// thunks\r\n\r\nexport const setNewPassword = (password: string, token: string) =>\r\n   (dispatch: ThunkDispatchType) => {\r\n      dispatch(isFetchingAC(true))\r\n      authAPI.sendNewPassword({\r\n         password,\r\n         resetPasswordToken: token,\r\n      }).then(res => {\r\n         if (res.status === 200) {\r\n            dispatch(setResult(true))\r\n         } else {\r\n            dispatch(setResult(false))\r\n            dispatch(errorAC('Oops...Something went wrong. Please try again later'))\r\n         }\r\n      }).catch(error => {\r\n         dispatch(setResult(false))\r\n         dispatch(errorAC(error.message))\r\n      }).finally(() => {\r\n         dispatch(isFetchingAC(false))\r\n      })\r\n   }\r\n\r\n// TYPES\r\n\r\ntype ActionsType = SetResultActionType\r\ntype ThunkDispatchType = Dispatch<ActionsType | isFetchingACType | ErrorACType>\r\n","import {Dispatch} from 'redux'\r\nimport {authAPI} from '../api/auth-api'\r\nimport {errorAC, ErrorACType, isFetchingAC, isFetchingACType} from './request-reducer'\r\n\r\nconst SET_CONFIRMING = 'SET_CONFIRMING'\r\nconst SET_SELECTED_EMAIL = 'SET_SELECTED_EMAIL'\r\n\r\nconst initialState = {\r\n   selectedEmail: '' as string,\r\n   success: false as boolean,\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const restorePswReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n   switch (action.type) {\r\n      case 'SET_CONFIRMING':\r\n         return {\r\n            ...state,\r\n            success: action.payload,\r\n         }\r\n      case 'SET_SELECTED_EMAIL':\r\n         return {\r\n            ...state,\r\n            selectedEmail: action.payload,\r\n         }\r\n      default:\r\n         return state\r\n   }\r\n}\r\n\r\n// actions\r\n\r\nconst setConfirming = (value: boolean) => ({\r\n   type: SET_CONFIRMING,\r\n   payload: value,\r\n} as const)\r\ntype SetConfirmingActionType = ReturnType<typeof setConfirming>\r\n\r\nconst setSelectedEmail = (email: string) => ({\r\n   type: SET_SELECTED_EMAIL,\r\n   payload: email,\r\n} as const)\r\ntype SetSelectedEmail = ReturnType<typeof setSelectedEmail>\r\n\r\n// thunks\r\n\r\nexport const getEmailConfirmation = (email: string) =>\r\n   (dispatch: ThunkDispatchType) => {\r\n      const message = `\r\n         <div style=\"background-color: lime; padding: 15px\">\t\r\n            password recovery link:\r\n            <a href='http://localhost:3000/memory-cards#/set-new-password/$token$'>\r\n            link</a>\r\n         </div>\r\n      `\r\n      dispatch(isFetchingAC(true))\r\n      authAPI.forgot({\r\n         email, // кому восстанавливать пароль\r\n         from: `<${email}>`, // можно указать разработчика фронта)\r\n         message: message,\r\n      }).then(res => {\r\n            if (res.data.success) {\r\n               dispatch(setConfirming(res.data.success))\r\n               dispatch(setSelectedEmail(email))\r\n            } else if (res.data.success) {\r\n               dispatch(errorAC('Oops...Something went wrong. Please try again later'))\r\n            }\r\n         },\r\n      ).catch(error => {\r\n         dispatch(errorAC(error.message))\r\n      }).finally(() => {\r\n         dispatch(isFetchingAC(false))\r\n      })\r\n   }\r\n\r\n// TYPES\r\n\r\ntype ActionsType\r\n   = SetConfirmingActionType\r\n   | SetSelectedEmail\r\n\r\ntype ThunkDispatchType = Dispatch<ActionsType | isFetchingACType | ErrorACType>\r\n","import {authAPI, RegistrationParamsType} from '../api/auth-api'\r\nimport {Dispatch} from 'redux'\r\nimport {errorAC, ErrorACType, isFetchingAC, isFetchingACType} from './request-reducer'\r\n\r\nconst initialState = {\r\n   isRegistered: false as boolean,\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const registrationReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n   switch (action.type) {\r\n      case 'REGISTRATION':\r\n         return {\r\n            ...state,\r\n            isRegistered: action.payload,\r\n         }\r\n\r\n      default:\r\n         return state\r\n   }\r\n}\r\n\r\n// actions\r\nexport const registrationAC = (payload: boolean) => ({type: 'REGISTRATION', payload} as const)\r\n\r\n// THUNK\r\nexport const registrationTC = (data: RegistrationParamsType) => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType>) => {\r\n   dispatch(isFetchingAC(true))\r\n   authAPI.registration(data)\r\n      .then(res => {\r\n         dispatch(isFetchingAC(false))\r\n         if (res.status === 201) {\r\n            dispatch(registrationAC(true))\r\n         } else {\r\n            dispatch(errorAC('Oops...Something went wrong. Please try again later'))\r\n         }\r\n      })\r\n      .catch((error) => {\r\n         dispatch(errorAC(error.message))\r\n         dispatch(isFetchingAC(false))\r\n      })\r\n}\r\n\r\n// TYPES\r\nexport type ActionsType = exampleACType\r\nexport type exampleACType = ReturnType<typeof registrationAC>\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__nA1Ui\"};","module.exports = __webpack_public_path__ + \"static/media/loader.aa8b6d13.svg\";","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    //baseURL: 'http://localhost:7542/2.0/',\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    withCredentials: true\r\n})","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport classes from './Button.module.scss'\r\n\r\ntype InputPropsType\r\n    = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n    & { labelTitle?: string};\r\n\r\nconst Button = (props: InputPropsType) => {\r\n    const {labelTitle, ...restProps} = props\r\n    return (\r\n        <button className={classes.btn} {...restProps}> {props.labelTitle}</button>\r\n    )\r\n}\r\n\r\nexport default React.memo(Button)\r\n","import {Dispatch} from 'redux'\r\nimport {authAPI, LoginParamsType, LoginResponseType} from '../api/auth-api'\r\nimport {errorAC, ErrorACType, isFetchingAC, isFetchingACType} from './request-reducer'\r\n\r\nconst initialState = {\r\n   isLoggedIn: false,\r\n   profile: {} as LoginResponseType,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const loginReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n   switch (action.type) {\r\n      case 'LOGIN':\r\n         return {...state, isLoggedIn: action.value}\r\n      case 'GET_USER_DATA':\r\n         return {...state, profile: action.profile}\r\n      case 'AUTH_ME':\r\n         return {...state, isLoggedIn: action.success}\r\n      default:\r\n         return state\r\n   }\r\n}\r\n\r\n// action creators\r\nexport const setIsLoggedInAC = (value: boolean) => ({type: 'LOGIN', value} as const)\r\nexport const getUserDataAC = (profile: LoginResponseType) => ({type: 'GET_USER_DATA', profile} as const)\r\nexport const authMeAC = (success: boolean) => ({type: 'AUTH_ME', success} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType | any>) => {\r\n   dispatch(isFetchingAC(true))\r\n   authAPI.login(data)\r\n      .then(res => {\r\n         dispatch(isFetchingAC(false))\r\n         if (res.status === 200) {\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(getUserDataAC(res.data))\r\n         } else {\r\n            dispatch(errorAC('Oops...Something went wrong. Please try again later'))\r\n            dispatch(setIsLoggedInAC(false))\r\n         }\r\n      })\r\n      .catch((error) => {\r\n         //dispatch(errorAC(error.response.data.error))\r\n         dispatch(isFetchingAC(false))\r\n      })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType | authSucessACType>) => {\r\n   dispatch(isFetchingAC(true))\r\n   authAPI.logout()\r\n       .then(res => {\r\n          dispatch(isFetchingAC(false))\r\n          dispatch(authMeAC(false))\r\n       })\r\n       .catch((error) => {\r\n          //dispatch(errorAC(error.response.data.error))\r\n          dispatch(isFetchingAC(false))\r\n       })\r\n}\r\n\r\nexport const authSucessTC = () => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType | authSucessACType>) => {\r\n    dispatch(isFetchingAC(true))\r\n    authAPI.authMe()\r\n        .then(res => {\r\n            dispatch(isFetchingAC(false))\r\n            dispatch(getUserDataAC(res.data))\r\n            dispatch(authMeAC(true))\r\n        })\r\n        .catch((error) => {\r\n            //dispatch(errorAC(error.response.data.error))\r\n            dispatch(isFetchingAC(false))\r\n        })\r\n}\r\n\r\n// TYPES\r\nexport type ActionsType = setIsLoggedInACType | getUserDataACType | authSucessACType\r\nexport type setIsLoggedInACType = ReturnType<typeof setIsLoggedInAC>\r\nexport type getUserDataACType = ReturnType<typeof getUserDataAC>\r\nexport type authSucessACType = ReturnType<typeof authMeAC>\r\n","import React from 'react'\r\nimport classes from './Login.module.scss'\r\nimport {NavLink, Redirect} from 'react-router-dom'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../reducers/store'\r\nimport {loginTC} from '../../reducers/login-reducer'\r\nimport {PROFILE, REGISTRATION, RESTORE_PASSWORD} from '../../route'\r\nimport Preloader from '../common/Preloader/Preloader'\r\nimport {useFormik} from 'formik'\r\nimport Input from '../common/Input/Input'\r\nimport Button from '../common/Button/Button'\r\nimport * as Yup from 'yup'\r\n\r\nconst validationSchema = () => Yup.object({\r\n   email: Yup.string()\r\n      .email('Invalid email address')\r\n      .required('Required'),\r\n   password: Yup.string()\r\n      .required('Required')\r\n      .min(8, 'Must be 8 characters or less'),\r\n})\r\n\r\nconst Login = () => {\r\n   const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n   const errorMsg = useSelector<AppRootStateType, string>(state => state.request.error)\r\n   const dispatch = useDispatch()\r\n\r\n   const formik = useFormik({\r\n      initialValues: {\r\n         email: '',\r\n         password: '',\r\n         rememberMe: false,\r\n      },\r\n      validationSchema,\r\n      onSubmit: values => {\r\n         dispatch(loginTC(values))\r\n      },\r\n   })\r\n\r\n   if (isLoggedIn) {\r\n      return <Redirect to={PROFILE}/>\r\n   }\r\n\r\n   return (\r\n      <div className={classes.container}>\r\n         <h1>Login</h1>\r\n         <form onSubmit={formik.handleSubmit}>\r\n\r\n            {errorMsg && <p><strong>{errorMsg}</strong></p>}\r\n\r\n            <div className={classes.formItem}>\r\n               <Input labelTitle={'Email'}\r\n                      error={formik.errors.email}\r\n                      {...formik.getFieldProps('email')}/>\r\n            </div>\r\n\r\n            <div className={classes.formItem}>\r\n               <Input type='password'\r\n                      labelTitle={'Password'}\r\n                      error={formik.errors.password}\r\n                      {...formik.getFieldProps('password')}/>\r\n            </div>\r\n\r\n            <div className={classes.formItem}>\r\n               <label htmlFor=\"password\">remember me</label>\r\n               <input\r\n                  type='checkbox'\r\n                  {...formik.getFieldProps('rememberMe')}/>\r\n            </div>\r\n\r\n            <Button type=\"submit\" labelTitle={'Send'}/>\r\n         </form>\r\n\r\n         <div className={classes.subLinks}>\r\n            <NavLink to={RESTORE_PASSWORD}>Forgot Password?</NavLink>\r\n            <NavLink to={REGISTRATION}>Registration</NavLink>\r\n         </div>\r\n\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default React.memo(Login)","import React, {useEffect, useState} from 'react';\r\nimport styles from './Profile.module.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../reducers/store\";\r\nimport {LoginResponseType} from \"../../api/auth-api\";\r\nimport {LOGIN, PACKS, PROFILE} from \"../../route\";\r\nimport {Link, Redirect} from \"react-router-dom\";\r\nimport {setIsLoggedInAC, logoutTC, authSucessTC} from \"../../reducers/login-reducer\";\r\nimport Button from \"../common/Button/Button\";\r\n\r\nconst Profile = () => {\r\n\r\n    const userData = useSelector<AppRootStateType, LoginResponseType>(state => state.login.profile)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            handleAuth()\r\n        }\r\n    }, [])\r\n\r\n    const handleAuth = async () => {\r\n        await dispatch(authSucessTC());\r\n    }\r\n\r\n    const setLogOut = () => {\r\n        dispatch(logoutTC())\r\n        dispatch(setIsLoggedInAC(false))\r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Profile</h1>\r\n            <h3>name: {userData.name}</h3>\r\n            <p>email: {userData.email}</p>\r\n            <p>publicCardPacksCount: {userData.publicCardPacksCount}</p>\r\n            <p><u><Link to={PACKS}>See my card packs</Link></u></p>\r\n            <div><img src={userData.avatar} alt={userData.name} width={200}/></div>\r\n            <Button onClick={setLogOut} labelTitle={'LogOut'}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(Profile)","import React from 'react'\r\nimport classes from './Navbar.module.scss'\r\nimport {NavLink} from 'react-router-dom'\r\nimport * as LINKS from '../../route'\r\n\r\nconst Navbar = () => {\r\n\r\n   React.useEffect(() => {\r\n      document.body.addEventListener('click', handleOutsideClick)\r\n   })\r\n\r\n   const [activeMenu, setActiveMenu] = React.useState<boolean>(false)\r\n\r\n   const menuRef = React.useRef<HTMLDivElement>(null)\r\n\r\n   const handleOutsideClick = (event: MouseEvent | any) => {\r\n      const path = event.path || (event.composedPath && event.composedPath()) // firefox uses composedPath\r\n      if (!path.includes(menuRef.current)) {\r\n         setActiveMenu(false)\r\n      }\r\n\r\n   }\r\n\r\n   const onClickSwitch = () => setActiveMenu(prevState => !prevState)\r\n   const onClickLink = () => setActiveMenu(false)\r\n\r\n   return (\r\n      <div className={classes.menu} ref={menuRef}>\r\n         <div className={classes.menuTitle}>Menu</div>\r\n         <div className={`${classes.switch} ${activeMenu ? classes.active : ''}`} onClick={onClickSwitch}>\r\n            <div className={classes.switchLine}></div>\r\n            <div className={classes.switchLine}></div>\r\n            <div className={classes.switchLine}></div>\r\n         </div>\r\n         <nav className={classes.navbar}>\r\n            <NavLink to={LINKS.LOGIN} activeClassName={classes.activeLink} onClick={onClickLink}>login</NavLink>\r\n            <NavLink to={LINKS.PROFILE} activeClassName={classes.activeLink} onClick={onClickLink}>profile</NavLink>\r\n            <NavLink to={LINKS.PACKS} activeClassName={classes.activeLink} onClick={onClickLink}>card packs</NavLink>\r\n            <NavLink to={LINKS.REGISTRATION} activeClassName={classes.activeLink} onClick={onClickLink}>registration</NavLink>\r\n            <NavLink to={LINKS.RESTORE_PASSWORD} activeClassName={classes.activeLink} onClick={onClickLink}>restore password</NavLink>\r\n         </nav>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default React.memo(Navbar)\r\n","import React from 'react'\r\nimport classes from './Header.module.scss'\r\nimport Navbar from '../Navbar/Navbar'\r\n\r\nconst Header = () => {\r\n   return (\r\n      <header className={classes.header}>\r\n         <div className={classes.container}>\r\n            <div>Logo</div>\r\n            <Navbar/>\r\n         </div>\r\n      </header>\r\n   )\r\n}\r\n\r\nexport default React.memo(Header)\r\n","import {instance} from \"./api\";\r\nimport {EditCardModelType} from \"../reducers/cards-reducer\";\r\n\r\n\r\nexport const cardsAPI = {\r\n    getCards(cardsPack_id: string) {\r\n        return instance.get<CardsResponseType>(`cards/card?cardsPack_id=${cardsPack_id}&pageCount=20`)\r\n    },\r\n    addCard(cardsPack_id: string, question: string, answer: string) {\r\n        return instance.post<AddCardResponseType>(`cards/card`, {\r\n            card: {cardsPack_id, question, answer}\r\n        })\r\n    },\r\n\r\n    editCard(_id: string, model: EditCardModelType) {\r\n        return instance.put<CardsResponseType>(`cards/card`, {\r\n            card: {\r\n                _id: _id,\r\n                question: model.question,\r\n                answer: model.answer\r\n            }\r\n        })\r\n    },\r\n    removeCard(_id: string) {\r\n        return instance.delete<CardsResponseType>(`cards/card?id=${_id}`)\r\n    },\r\n}\r\n\r\nexport type CardsResponseType = {\r\n    cards: Array<CardsType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n}\r\n\r\nexport type AddCardResponseType = {\r\n    newCard: NewCardType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\nexport type NewCardType = {\r\n    answer: string\r\n    cardsPack_id: string\r\n    comments: string\r\n    created: string\r\n    grade: number\r\n    more_id: string\r\n    question: string\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    updated: string\r\n    user_id: string\r\n    __v: number\r\n    _id: string\r\n}\r\n\r\nexport type CardsType = {\r\n    answer: string\r\n    question: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    user_id: string\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    _id: string\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {ErrorACType, isFetchingAC, isFetchingACType} from \"./request-reducer\";\r\nimport {cardsAPI, CardsType, NewCardType} from \"../api/cards-api\";\r\n\r\nlet initialState = {\r\n    cards: [] as CardsType[],\r\n    cardsTotalCount: 0,\r\n    maxGrade: 0,\r\n    minGrade: 0,\r\n    page: 0,\r\n    pageCount: 0\r\n}\r\n\r\nexport const cardsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_CARDS':\r\n            return {...state, cards: action.cards}\r\n        case 'ADD_CARD':\r\n            return {...state, cards: [action.newCard, ...state.cards]}\r\n        case 'REMOVE_CARD':\r\n            return {...state, cards: state.cards.filter((c) => c._id != action._id)}\r\n        case 'EDIT_CARD':\r\n            return {\r\n                ...state,\r\n                cards: state.cards.map(p => p._id === action.card_id ? {...p, ...action.model} : p)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// AC\r\nexport const setCardsAC = (cards: CardsType[]) => ({type: 'SET_CARDS', cards} as const)\r\nexport const addCardAC = (newCard: NewCardType) => ({type: 'ADD_PACK', newCard} as const)\r\nexport const removeCardAC = (_id: string) => ({type: 'REMOVE_CARD', _id} as const)\r\nexport const editCardAC = (card_id: string, model: EditCardModelType) => ({type: 'EDIT_CARD', card_id, model} as const)\r\n\r\n// thunks\r\nexport const getCardsTC = (cardsPack_id: string) => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType>) => {\r\n    dispatch(isFetchingAC(true))\r\n    cardsAPI.getCards(cardsPack_id)\r\n        .then(res => {\r\n            dispatch(isFetchingAC(false))\r\n            dispatch(setCardsAC(res.data.cards))\r\n        })\r\n        .catch((error) => {\r\n            //dispatch(errorAC(error.response.data.error))\r\n            dispatch(isFetchingAC(false))\r\n        })\r\n}\r\n\r\nexport const addCardTC = (cardsPack_id: string, question: string, answer: string) => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType>) => {\r\n    dispatch(isFetchingAC(true))\r\n    cardsAPI.addCard(cardsPack_id, question, answer)\r\n        .then(res => {\r\n            dispatch(isFetchingAC(false))\r\n            dispatch(addCardAC(res.data.newCard))\r\n            dispatch(getCardsTC(cardsPack_id))\r\n        })\r\n        .catch((error) => {\r\n            console.log(error.response.data.error)\r\n            dispatch(isFetchingAC(false))\r\n        })\r\n}\r\n\r\nexport const removeCardTC = (_id: string, cardsPack_id: string) => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType>) => {\r\n    dispatch(isFetchingAC(true))\r\n    cardsAPI.removeCard(_id)\r\n        .then(res => {\r\n            dispatch(isFetchingAC(false))\r\n            dispatch(removeCardAC(_id))\r\n            dispatch(getCardsTC(cardsPack_id))\r\n        })\r\n        .catch((error) => {\r\n            console.log(error.response.data.error)\r\n            dispatch(isFetchingAC(false))\r\n        })\r\n}\r\n\r\nexport const editCardTC = (card_id: string, model: EditCardModelType, cardsPack_id: string) => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType>) => {\r\n    dispatch(isFetchingAC(true))\r\n    cardsAPI.editCard(card_id, model)\r\n        .then(res => {\r\n            dispatch(isFetchingAC(false))\r\n            editCardAC(card_id, model)\r\n            dispatch(getCardsTC(cardsPack_id))\r\n        })\r\n        .catch((error) => {\r\n            console.log(error.response.data.error)\r\n            dispatch(isFetchingAC(false))\r\n        })\r\n}\r\n\r\n\r\ntype InitialStateType = {\r\n    cards: Array<CardsType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n}\r\n\r\ntype ActionsType = setCardsACType | addCardACType | RemoveCardType | any\r\n\r\n\r\nexport type setCardsACType = ReturnType<typeof setCardsAC>\r\nexport type addCardACType = ReturnType<typeof addCardAC>\r\nexport type RemoveCardType = ReturnType<typeof removeCardAC>\r\n\r\n\r\nexport type EditCardModelType = {\r\n    question?: string\r\n    answer?: string\r\n}\r\n\r\n\r\n","import React, {useEffect} from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../reducers/store\";\r\nimport {addCardTC, EditCardModelType, editCardTC, getCardsTC, removeCardTC} from \"../../reducers/cards-reducer\";\r\nimport {CardsType} from \"../../api/cards-api\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport Button from \"../common/Button/Button\";\r\nimport classes from './Cards.module.scss';\r\n\r\nconst Cards = () => {\r\n\r\n    const cards = useSelector<AppRootStateType, Array<CardsType>>(state => state.cards.cards)\r\n    const {cardId} = useParams();\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getCardsTC(cardId))\r\n    }, [])\r\n\r\n    const removeCard = (_id: string) => {\r\n        dispatch(removeCardTC(_id, cardId))\r\n    }\r\n\r\n    const addCard = (question: string, answer: string) => {\r\n        dispatch(addCardTC(cardId, question, answer))\r\n    }\r\n\r\n    const editCard = (card_id: string, model: EditCardModelType) => {\r\n        dispatch(editCardTC(card_id, model, cardId))\r\n    }\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <h1>Cards</h1>\r\n            <Button\r\n                labelTitle={'Add a Card'}\r\n                onClick={() => addCard('???', '!!!')}\r\n            />\r\n            <div className={classes.table}>\r\n                <div className={`${classes.tableHeader} ${classes.tableRow}`}>\r\n                    <div><strong>Question</strong></div>\r\n                    <div><strong>Answer</strong></div>\r\n                    <div><strong>Actions</strong></div>\r\n                </div>\r\n\r\n                {cards && cards.map(c => <div key={c._id} className={classes.tableRow}>\r\n                        <div>{c.question}</div>\r\n                        <div>{c.answer}</div>\r\n                        <div>\r\n                            <Button labelTitle={'Edit'}\r\n                                    onClick={() => editCard(c._id, {question: 'New Question', answer: 'New Answer'})}/>\r\n                            <Button labelTitle={'Delete'} onClick={() => removeCard(c._id)}/></div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;\r\n\r\n","import {instance} from \"./api\";\r\nimport {EditCardPackType} from \"../reducers/pack-reducer\";\r\n\r\n\r\nexport const packAPI = {\r\n    getCardPacksUser(user_id: string) {\r\n        return instance.get<CardsPackResponseType>(`cards/pack?user_id=${user_id}`)\r\n    },\r\n    getCardPacksAll() {\r\n        return instance.get<CardsPackResponseType>(`cards/pack`)\r\n    },\r\n    addCardPack(name: string) {\r\n        return instance.post<NewCardsPackResponseType>(`cards/pack`, {\r\n            cardsPack: {\r\n                name: name\r\n            }\r\n        })\r\n    },\r\n    editCardPack(_id: string, model: EditCardPackType) {\r\n        return instance.put<NewCardsPackResponseType>(`cards/pack`, {\r\n            cardsPack: {\r\n                _id: _id,\r\n                name: model.name,\r\n                private: model.private,\r\n                rating: model.rating\r\n            }\r\n        })\r\n    },\r\n    removeCardPack(pack_id: string) {\r\n        return instance.delete<CardsPackResponseType>(`cards/pack?id=${pack_id}`)\r\n    },\r\n    searchCardPacks(searchName?: string, min?: number, max?: number) {\r\n        return instance.get<CardsPackResponseType>(`cards/pack`\r\n            + (searchName? `?packName=${searchName}` : '?')\r\n            + (max ? `&min=${min}&max=${max}` : '')\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport type CardsPackResponseType = {\r\n    cardPacks: Array<CardsPackType>\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\n\r\n\r\nexport type NewCardsPackResponseType = {\r\n    newCardsPack: newCardsType\r\n}\r\n\r\nexport type newCardsType = {\r\n    cardsCount: number\r\n    created: string\r\n    //deckCover: string\r\n    grade: number\r\n    more_id: string\r\n    name: string\r\n    path: string\r\n    private: boolean\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    updated: string\r\n    user_id: string\r\n    user_name: string\r\n    __v: number\r\n    _id: string\r\n}\r\n\r\nexport type CardsPackType = {\r\n    cardsCount: number\r\n    created: string\r\n    //deckCover: string\r\n    grade: number\r\n    more_id: string\r\n    name: string\r\n    path: string\r\n    private: boolean\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    updated: string\r\n    user_id: string\r\n    user_name: string\r\n    __v: number\r\n    _id: string\r\n}","import {Dispatch} from \"redux\";\r\nimport {ErrorACType, isFetchingAC, isFetchingACType} from \"./request-reducer\";\r\nimport {CardsPackType, packAPI} from \"../api/pack-api\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nlet initialState = {\r\n    cardPacks: [] as CardsPackType[],\r\n    cardPacksTotalCount: 0,\r\n    packName: '',\r\n    maxCardsCount: 10,\r\n    minCardsCount: 0,\r\n    page: 0,\r\n    pageCount: 0,\r\n    token: '',\r\n    tokenDeathTime: 0\r\n}\r\n\r\n\r\nexport const packReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_PACKS':\r\n            return {...state, cardPacks: action.cardPacks}\r\n        case 'REMOVE_PACK':\r\n            return {...state, cardPacks: state.cardPacks.filter((pack) => pack._id != action._id)}\r\n        case 'ADD_PACK':\r\n            return {...state, cardPacks: [action.newPack, ...state.cardPacks]}\r\n        case 'SEARCH_PACK_NAME':\r\n            return {...state, packName: action.packName}\r\n        case 'SET_MIN_MAX_CARDS_COUNT':\r\n            return {...state, minCardsCount: action.newValues[0], maxCardsCount: action.newValues[1]}\r\n        case 'EDIT_PACK':\r\n            return {\r\n                ...state,\r\n                cardPacks: state.cardPacks.map(p => p._id === action.pack_id ? {...p, ...action.model} : p)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n// AC\r\nexport const setPacksAC = (cardPacks: CardsPackType[]) => ({type: 'SET_PACKS', cardPacks} as const)\r\nexport const removePackAC = (_id: string) => ({type: 'REMOVE_PACK', _id} as const)\r\nexport const addPackAC = (newPack: CardsPackType) => ({type: 'ADD_PACK', newPack} as const)\r\nexport const searchPackNameAC = (packName: string) => ({type: 'SEARCH_PACK_NAME', packName} as const)\r\nexport const setMinMAxCardsCountAC = (newValues: number[]) => ({type: 'SET_MIN_MAX_CARDS_COUNT', newValues} as const)\r\nexport const editPackAC = (pack_id: string, model: EditCardPackType) => ({type: 'EDIT_PACK', pack_id, model} as const)\r\n\r\n// thunks\r\nexport const getPackTC = (user_id: string) => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType>) => {\r\n    dispatch(isFetchingAC(true))\r\n    packAPI.getCardPacksUser(user_id)\r\n        .then(res => {\r\n            dispatch(isFetchingAC(false))\r\n            dispatch(setPacksAC(res.data.cardPacks))\r\n        })\r\n        .catch((error) => {\r\n            //dispatch(errorAC(error.response.data.error))\r\n            dispatch(isFetchingAC(false))\r\n        })\r\n}\r\n\r\nexport const removePackTC = (_id: string, user_id: string) => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType>) => {\r\n    dispatch(isFetchingAC(true))\r\n    packAPI.removeCardPack(_id)\r\n        .then(res => {\r\n            dispatch(isFetchingAC(false))\r\n            dispatch(removePackAC(_id))\r\n            dispatch(getPackTC(user_id))\r\n        })\r\n        .catch((error) => {\r\n            console.log(error.response.data.error)\r\n            dispatch(isFetchingAC(false))\r\n        })\r\n}\r\n\r\nexport const addPackTC = (name: string, user_id: string) => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType>) => {\r\n    dispatch(isFetchingAC(true))\r\n    packAPI.addCardPack(name)\r\n        .then(res => {\r\n            dispatch(isFetchingAC(false))\r\n            dispatch(addPackAC(res.data.newCardsPack))\r\n            dispatch(getPackTC(user_id))\r\n        })\r\n        .catch((error) => {\r\n            console.log(error.response.data.error)\r\n            dispatch(isFetchingAC(false))\r\n        })\r\n}\r\n\r\nexport const editPackTC = (pack_id: string, model: EditCardPackType, user_id: string) => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType>) => {\r\n    dispatch(isFetchingAC(true))\r\n    packAPI.editCardPack(pack_id, model)\r\n        .then(res => {\r\n            dispatch(isFetchingAC(false))\r\n            editPackAC(pack_id, model)\r\n            dispatch(getPackTC(user_id))\r\n        })\r\n        .catch((error) => {\r\n            console.log(error.response.data.error)\r\n            dispatch(isFetchingAC(false))\r\n        })\r\n}\r\n\r\nexport const searchPackTC = () => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType>, getState: () => AppRootStateType) => {\r\n    debugger\r\n    const {packName, minCardsCount, maxCardsCount} = getState().packs\r\n    dispatch(isFetchingAC(true))\r\n    packAPI.searchCardPacks(packName, minCardsCount, maxCardsCount)\r\n        .then(res => {\r\n            dispatch(isFetchingAC(false))\r\n            dispatch(setPacksAC(res.data.cardPacks))\r\n        })\r\n        .catch((error) => {\r\n            //dispatch(errorAC(error.response.data.error))\r\n            dispatch(isFetchingAC(false))\r\n        })\r\n}\r\n\r\ntype InitialStateType = {\r\n    cardPacks: CardsPackType[]\r\n    cardPacksTotalCount: number\r\n    packName: string\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\ntype ActionsType = setPacksACType | removePackACType | addPackACType | editPackACType | searchPackNameACType | setMinMAxCardsCountACType | any\r\n\r\n\r\nexport type EditCardPackType = {\r\n    name?: string\r\n    private?: boolean\r\n    rating?: number\r\n}\r\n\r\n\r\nexport type setPacksACType = ReturnType<typeof setPacksAC>\r\nexport type removePackACType = ReturnType<typeof removePackAC>\r\nexport type addPackACType = ReturnType<typeof addPackAC>\r\nexport type searchPackNameACType = ReturnType<typeof searchPackNameAC>\r\nexport type setMinMAxCardsCountACType = ReturnType<typeof setMinMAxCardsCountAC>\r\nexport type editPackACType = ReturnType<typeof editPackAC>\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport styles from './Preloader.module.css'\r\nimport preloader from '../../../assets/images/loader.svg'\r\n\r\nconst Preloader = () => {\r\n   return (\r\n      <div className={styles.wrapper}>\r\n         <img src={preloader} className={styles.img} alt='loader'/>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default React.memo(Preloader)\r\n","import React, {useEffect, useState} from 'react';\r\nimport {Range, getTrackBackground} from 'react-range';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../reducers/store\";\r\nimport {setMinMAxCardsCountAC} from \"../../../reducers/pack-reducer\";\r\n\r\nconst CardsCountRange: React.FC = () => {\r\n    const  minCardsCount = useSelector((state: AppRootStateType) => state.packs.minCardsCount)\r\n    const  maxCardsCount = useSelector((state: AppRootStateType) => state.packs.maxCardsCount)\r\n    const [values, setValues] = useState([minCardsCount, maxCardsCount]);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const setValuesCardsCount = (newValues: number[]) => {\r\n        dispatch(setMinMAxCardsCountAC(newValues));\r\n        setValues(newValues);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setValuesCardsCount([minCardsCount, maxCardsCount]);\r\n    }, [minCardsCount, maxCardsCount]);\r\n\r\n    return (\r\n        <Range\r\n            values={values}\r\n            step={1}\r\n            min={minCardsCount}\r\n            max={maxCardsCount}\r\n            onChange={values => (setValuesCardsCount(values))}\r\n            renderTrack={({props, children}) => (\r\n                <div\r\n                    onMouseDown={props.onMouseDown}\r\n                    onTouchStart={props.onTouchStart}\r\n                    style={{\r\n                        ...props.style,\r\n                        height: '36px',\r\n                        display: 'flex',\r\n                        width: '50%',\r\n                        margin: '30px',\r\n                    }}\r\n                >\r\n                    <div\r\n                        ref={props.ref}\r\n                        style={{\r\n                            height: '5px',\r\n                            width: '100%',\r\n                            borderRadius: '4px',\r\n                            background: getTrackBackground({\r\n                                values: values,\r\n                                colors: ['#ccc', '#499c35', '#ccc'],\r\n                                min: minCardsCount,\r\n                                max: maxCardsCount\r\n                            }),\r\n                            alignSelf: 'center'\r\n                        }}\r\n                    >\r\n                        {children}\r\n                    </div>\r\n                </div>\r\n            )}\r\n            renderThumb={({index, props, isDragged}) => (\r\n                <div\r\n                    {...props}\r\n                    style={{\r\n                        ...props.style,\r\n                        height: '12px',\r\n                        width: '12px',\r\n                        borderRadius: '1px',\r\n                        backgroundColor: '#FFF',\r\n                        boxShadow: '0px 2px 6px #AAA',\r\n                    }}\r\n                >\r\n                    <div\r\n                        style={{\r\n                            position: 'absolute',\r\n                            top: '-28px',\r\n                            color: '#fff',\r\n                            fontWeight: 'bold',\r\n                            fontSize: '14px',\r\n                            fontFamily: 'Arial,Helvetica Neue,Helvetica,sans-serif',\r\n                            padding: '4px',\r\n                            borderRadius: '4px',\r\n                            backgroundColor: '#499c35'\r\n                        }}\r\n                    >\r\n                        {values[index].toFixed(0)}\r\n                    </div>\r\n                    <div style={{height: '16px', width: '5px', backgroundColor: isDragged ? '#548BF4' : '#CCC'}}/>\r\n                </div>\r\n            )}\r\n        />\r\n    );\r\n};\r\n\r\nexport default CardsCountRange;\r\n","import React from \"react\";\r\nimport classes from './Search.module.scss'\r\nimport Input from \"../common/Input/Input\";\r\nimport Button from \"../common/Button/Button\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../reducers/store\";\r\nimport {searchPackNameAC, searchPackTC} from \"../../reducers/pack-reducer\";\r\nimport CardsCountRange from \"../common/Range/Range\";\r\n\r\nexport const Search = () => {\r\n    const dispatch = useDispatch()\r\n    const setSearchName = (newSearchName: string) => (\r\n        dispatch(searchPackNameAC(newSearchName))\r\n    )\r\n    const value = useSelector((state: AppRootStateType) => state.packs.packName)\r\n    const changeInputValue = (e: any) => {\r\n        setSearchName(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    const search = () => {\r\n        dispatch(searchPackTC())\r\n    }\r\n    return (\r\n        <div className={classes.search}>\r\n            <CardsCountRange/>\r\n            <div className={classes.search_item}>\r\n                <Input labelTitle={'Search'} value={value} onChange={changeInputValue}/>\r\n                <Button labelTitle={'Search'} onClick={search}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect} from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../reducers/store\";\r\nimport {addPackTC, EditCardPackType, editPackTC, getPackTC, removePackTC} from \"../../reducers/pack-reducer\";\r\nimport Button from \"../common/Button/Button\";\r\nimport {CardsPackType} from \"../../api/pack-api\";\r\nimport {Link, Redirect} from 'react-router-dom'\r\nimport {LOGIN} from \"../../route\";\r\nimport classes from './Packs.module.scss'\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {Search} from \"../Search/Search\";\r\nimport {authSucessTC} from \"../../reducers/login-reducer\";\r\n\r\nconst Packs = () => {\r\n    const requestIsFetching = useSelector<AppRootStateType, boolean>(state => state.request.isFetching)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    const cardPacks = useSelector<AppRootStateType, Array<CardsPackType>>(state => state.packs.cardPacks)\r\n    const user_id = useSelector<AppRootStateType, string>(state => state.login.profile._id)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getPackTC(user_id))\r\n    }, [])\r\n\r\n    const removePack = (_id: string) => {\r\n        dispatch(removePackTC(_id, user_id))\r\n    }\r\n\r\n    const addPack = (name: string) => {\r\n        dispatch(addPackTC(name, user_id))\r\n    }\r\n    \r\n    const editPack = (pack_id: string, model: EditCardPackType) => {\r\n        dispatch(editPackTC(pack_id, model, user_id))\r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={LOGIN}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            {requestIsFetching && <Preloader/>}\r\n            <Search/>\r\n            <h1>Packs </h1>\r\n            <Button\r\n                labelTitle={'Add new Pack'}\r\n                onClick={() => addPack('New super pack')}\r\n            />\r\n            <div className={classes.table}>\r\n                <div className={`${classes.tableHeader} ${classes.tableRow}`}>\r\n                    <div><strong>Name</strong></div>\r\n                    <div><strong>Show pack cards</strong></div>\r\n                    <div><strong>Actions</strong></div>\r\n                </div>\r\n\r\n                {cardPacks.map((pack) => {\r\n                    return (\r\n                        <div key={pack._id} className={classes.tableRow}>\r\n                            <div>{pack.name}</div>\r\n                            <div><Link to={`/cards/${pack._id}`}><Button labelTitle={'Show cards'}/></Link></div>\r\n                            <div>\r\n                                <Button labelTitle={'Edit'} onClick={() => editPack(pack._id, {name: 'new mane', private: true})}/>\r\n                                <Button labelTitle={'Delete'} onClick={() => removePack(pack._id)}/></div>\r\n                        </div>\r\n\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Packs;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {Suspense} from 'react'\r\nimport './App.css'\r\nimport {Route, Switch} from 'react-router-dom'\r\nimport * as paths from './route'\r\nimport Login from './components/Login/Login'\r\nimport Profile from './components/Profile/Profile'\r\nimport Header from './components/Header/Header'\r\nimport Cards from \"./components/Cards/Cards\";\r\nimport Packs from \"./components/Packs/Packs\";\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from \"./reducers/store\";\r\nimport {authSucessTC} from './reducers/login-reducer'\r\nimport {Preloader} from './components/common'\r\n\r\nconst Registration = React.lazy(() => import('./components/Registration/Registration'))\r\nconst RestorePassword = React.lazy(() => import('./components/RestorePassword/RestorePassword'))\r\nconst NewPassword = React.lazy(() => import('./components/NewPassword/NewPassword'))\r\nconst NotFound = React.lazy(() => import('./components/NotFound/NotFound'))\r\n\r\nfunction App() {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    const requestIsFetching = useSelector<AppRootStateType, boolean>(state => state.request.isFetching)\r\n    const dispatch = useDispatch();\r\n\r\n/*    React.useEffect(() => {\r\n        dispatch(authSucessTC())\r\n    }, [])*/\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {requestIsFetching && <Preloader/>}\r\n            <Header/>\r\n            <div className=\"content\">\r\n                <Suspense fallback={<Preloader/>}>\r\n                    <Switch>\r\n                        <Route exact path='/' render={() => isLoggedIn ? <Profile/> : <Login/>}/>\r\n                        <Route path={paths.LOGIN} render={() => <Login/>}/>\r\n                        <Route path={paths.PROFILE} render={() => <Profile/>}/>\r\n                        <Route path={paths.PACKS} render={() => <Packs/>}/>\r\n                        <Route path={paths.CARDS} render={() => <Cards/>}/>\r\n\r\n                        <Route path={paths.REGISTRATION} render={() => <Registration/>}/>\r\n                        <Route path={paths.RESTORE_PASSWORD} render={() => <RestorePassword/>}/>\r\n                        <Route path={paths.NEW_PASSWORD} render={() => <NewPassword/>}/>\r\n\r\n                        <Route component={NotFound}/>\r\n                    </Switch>\r\n                </Suspense>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React, {DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport classes from './Checkbox.module.scss'\r\n\r\ntype CheckboxPropsType\r\n   = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n   & {labelTitle?: string}\r\n\r\nconst Checkbox = (props: CheckboxPropsType) => {\r\n   const {labelTitle, ...restProps} = props\r\n   return (\r\n      <label className={classes.label}>\r\n         {labelTitle && <span className={classes.label}>{labelTitle}</span>}\r\n         <input {...restProps}\r\n                type=\"checkbox\"\r\n                className={classes.checkbox}/>\r\n         <div className={classes.customCheckbox}></div>\r\n      </label>\r\n   )\r\n}\r\n\r\nexport default React.memo(Checkbox)\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {loginReducer} from \"./login-reducer\";\r\nimport {newPswReducer} from \"./newPassword-reducer\";\r\nimport {restorePswReducer} from \"./restorePassword-reducer\";\r\nimport {registrationReducer} from \"./registration-reducer\";\r\nimport {requestReducer} from \"./request-reducer\";\r\nimport {packReducer} from \"./pack-reducer\";\r\nimport {cardsReducer} from \"./cards-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    login: loginReducer,\r\n    newPsw: newPswReducer,\r\n    restorePsw: restorePswReducer,\r\n    registration: registrationReducer,\r\n    request: requestReducer,\r\n    packs: packReducer,\r\n    cards: cardsReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from \"./reducers/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <HashRouter>\r\n                <App/>\r\n            </HashRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Navbar_menu__Mhcmp\",\"menuTitle\":\"Navbar_menuTitle__19_Im\",\"switch\":\"Navbar_switch__1pOjJ\",\"active\":\"Navbar_active__1XbSl\",\"navbar\":\"Navbar_navbar__3Queb\",\"activeLink\":\"Navbar_activeLink__15t2E\"};","import {instance} from './api'\r\n\r\n\r\nexport const authAPI = {\r\n   login: (data: LoginParamsType) =>\r\n      instance.post<LoginResponseType>('auth/login', data),\r\n   authMe: () =>\r\n      instance.post<LoginResponseType>('auth/me'),\r\n   logout: () =>\r\n      instance.delete<LoginResponseType>('auth/me'),\r\n   forgot: (data: ForgotParamsType) =>\r\n      instance.post<ForgotResponseType>('auth/forgot', data),\r\n   sendNewPassword: (data: NewPasswordParamsType) =>\r\n      instance.post<NewPasswordResponseType>('auth/set-new-password', data),\r\n   registration: (data: RegistrationParamsType) =>\r\n      instance.post<RegistrationResponseType>('auth/register', data),\r\n}\r\n\r\n// TYPES\r\n\r\nexport type LoginParamsType = {\r\n   password: string,\r\n   email: string,\r\n   rememberMe: boolean,\r\n}\r\n\r\nexport type LoginResponseType = {\r\n   _id: string,\r\n   email: string,\r\n   name: string,\r\n   avatar?: string,\r\n   publicCardPacksCount: number, // количество колод\r\n\r\n   created: string,\r\n   updated: string,\r\n   isAdmin: boolean,\r\n   verified: boolean, // подтвердил ли почту\r\n   rememberMe: boolean,\r\n\r\n   error: string,\r\n}\r\n\r\nexport type AddedUserType = {\r\n   email: string,\r\n   isAdmin: boolean,\r\n   __v: number,\r\n   _id: string,\r\n}\r\n\r\nexport type RegistrationResponseType = {\r\n   addedUser: AddedUserType,\r\n   success: boolean,\r\n}\r\n\r\n// export type LoginResponseErrorType = {\r\n//    body: LoginParamsType,\r\n//    error: string,\r\n//    method: string,\r\n//    query: {},\r\n//    url: string,\r\n// }\r\n\r\nexport type ForgotParamsType = {\r\n   email: string,\r\n   from: string,\r\n   message: string,\r\n}\r\n\r\nexport type ForgotResponseType = {\r\n   answer: boolean,\r\n   html: boolean,\r\n   info: string,\r\n   success: boolean,\r\n}\r\n\r\nexport type NewPasswordParamsType = {\r\n   password: string,\r\n   resetPasswordToken: string,\r\n}\r\n\r\nexport type NewPasswordResponseType = {\r\n   info: string,\r\n}\r\n\r\nexport type RegistrationParamsType = {\r\n   email: string,\r\n   password: string,\r\n   repeatPassword?: string,\r\n}\r\n\r\nexport type FormErrorType = {\r\n   email?: string,\r\n   password?: string,\r\n   repeatPassword?: string,\r\n   rememberMe?: boolean,\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Input_label__jOF-3\",\"error\":\"Input_error__39qKP\",\"errorMessage\":\"Input_errorMessage__3ysst\",\"showPassword\":\"Input_showPassword__2oNMr\",\"input\":\"Input_input__1VWGP\"};","import React, {DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport classes from './Input.module.scss'\r\nimport Icons from '../Icons/Icons'\r\n\r\ntype InputPropsType\r\n   = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n   & { labelTitle?: string, error?: string }\r\n\r\nconst Input = (props: InputPropsType) => {\r\n\r\n   const [showPassword, setShowPassword] = React.useState<boolean>(false)\r\n\r\n   const handleShowPassword = () => {\r\n      setShowPassword(prevState => !prevState)\r\n   }\r\n\r\n   const {labelTitle, error, ...restProps} = props\r\n   const type = props.type === 'password' && !showPassword ? 'password' : 'text'\r\n\r\n   return (\r\n      <label className={classes.label}>\r\n         {labelTitle && <span className={classes.label}>{labelTitle}</span>}\r\n         <input {...restProps} type={type} className={`${classes.input} ${props.className}`}/>\r\n         {\r\n            type === 'password' &&\r\n               <div className={classes.showPassword} onClick={handleShowPassword}>\r\n                  {Icons.Eye()}\r\n               </div>\r\n         }\r\n         {\r\n            showPassword &&\r\n            <div className={classes.showPassword} onClick={handleShowPassword}>\r\n               {Icons.EyeSlash()}\r\n            </div>\r\n         }\r\n         {\r\n            error &&\r\n               <div className={classes.error}>\r\n                  {Icons.Error()}\r\n                  <div className={classes.errorMessage}>{error}</div>\r\n               </div>\r\n         }\r\n      </label>\r\n   )\r\n}\r\n\r\nexport default React.memo(Input)\r\n","import React from 'react'\r\nimport {findIconDefinition, IconDefinition, IconLookup} from '@fortawesome/fontawesome-svg-core'\r\nimport {library} from '@fortawesome/fontawesome-svg-core'\r\nimport {fas} from '@fortawesome/free-solid-svg-icons'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\n\r\nlibrary.add(fas)\r\n\r\nconst iconDefinition = (iconName: any, pref?: any): IconDefinition => {\r\n   const prefix = pref ? pref : 'fas'\r\n   const Lookup: IconLookup = {prefix: prefix, iconName: iconName}\r\n   return findIconDefinition(Lookup)\r\n}\r\n\r\n// создаете новую иконку с именем из каталога https://fontawesome.com/icons (только free)\r\nconst SignInAlt = () => <FontAwesomeIcon icon={iconDefinition('sign-in-alt')}/>\r\nconst SignOutAlt = () => <FontAwesomeIcon icon={iconDefinition('sign-out-alt')}/>\r\nconst Key = () => <FontAwesomeIcon icon={iconDefinition('key')}/>\r\nconst Lock = () => <FontAwesomeIcon icon={iconDefinition('lock')}/>\r\nconst Error = () => <FontAwesomeIcon icon={iconDefinition('exclamation-circle')}/>\r\nconst Eye = () => <FontAwesomeIcon icon={iconDefinition('eye')}/>\r\nconst EyeSlash = () => <FontAwesomeIcon icon={iconDefinition('eye-slash')}/>\r\nconst SearchLocation = () => <FontAwesomeIcon icon={iconDefinition('search-location')}/>\r\n\r\n// добавляете в этот объект\r\nconst Icons = {\r\n   SignInAlt,\r\n   SignOutAlt,\r\n   Key,\r\n   Lock,\r\n   Error,\r\n   Eye,\r\n   EyeSlash,\r\n   SearchLocation,\r\n}\r\n\r\nexport default Icons\r\n// в таком виде вставляете в разметку: { Icons.coffee() }\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Login_container__1dhzn\",\"formItem\":\"Login_formItem__1I2Ut\",\"subLinks\":\"Login_subLinks__3-Xeg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3jJh8\",\"table\":\"Cards_table__1OEYJ\",\"tableRow\":\"Cards_tableRow__nwf7S\",\"tableHeader\":\"Cards_tableHeader__1Rk_X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Packs_container__2Uv5c\",\"table\":\"Packs_table__1SSVS\",\"tableRow\":\"Packs_tableRow__1yRlX\",\"tableHeader\":\"Packs_tableHeader__kNgj8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Checkbox_label__1q_k8\",\"checkbox\":\"Checkbox_checkbox__2d-7_\",\"customCheckbox\":\"Checkbox_customCheckbox__KijXE\"};","export const LOGIN = '/login';\r\nexport const NEW_PASSWORD = '/set-new-password/:token?'\r\nexport const PROFILE = '/profile'\r\nexport const REGISTRATION = '/registration'\r\nexport const RESTORE_PASSWORD = '/restore-password'\r\nexport const CARDS = '/cards/:cardId?'\r\nexport const PACKS = '/packs'","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__Wf4ao\",\"container\":\"Header_container__38qBT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Preloader_wrapper__SnQP1\",\"img\":\"Preloader_img__qADR8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"Search_search__2UaKF\",\"search_item\":\"Search_search_item__Nrbq4\"};"],"sourceRoot":""}