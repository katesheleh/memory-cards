{"version":3,"sources":["components/NewPassword/NewPassword.module.css","components/common/Preloader/Preloader.module.css","assets/images/loader.svg","api/api.ts","reducers/request-reducer.ts","utils/cookies.ts","reducers/profile-reducer.ts","reducers/login-reducer.ts","components/common/Preloader/Preloader.tsx","components/Login/Login.tsx","route.ts","reducers/newPassword-reducer.ts","components/NewPassword/NewPassword.tsx","components/Profile/Profile.tsx","reducers/registration-reducer.ts","components/Registration/Registration.tsx","reducers/restorePassword-reducer.ts","components/RestorePassword/RestorePassword.tsx","App.tsx","serviceWorker.ts","reducers/store.ts","index.tsx"],"names":["module","exports","instance","axios","create","baseURL","authAPI","data","post","initialState","error","isFetching","errorAC","type","isFetchingAC","cookies","Cookies","success","profile","_id","email","name","avatar","publicCardPacksCount","created","updated","isAdmin","verified","rememberMe","getUserDataAC","getUserDataTC","dispatch","then","res","get","catch","response","isLoggedIn","setIsLoggedInAC","value","loginTC","status","set","path","Preloader","React","memo","className","styles","wrapper","src","preloader","img","alt","validate","values","errors","test","password","length","Login","useSelector","state","login","requestIsFetching","request","errorMsg","useDispatch","formik","useFormik","initialValues","onSubmit","to","handleSubmit","htmlFor","getFieldProps","setResult","payload","NewPassword","token","useParams","newPsw","useState","firstNewPassword","setFirstNewPassword","secondNewPassword","setSecondNewPassword","setError","classes","container","id","onChange","e","currentTarget","btn","onClick","trim","a","resetPasswordToken","setNewPassword","disabled","Profile","userData","useEffect","width","isRegistered","registrationAC","repeatPassword","Registration","registration","message","selectedEmail","setSelectedEmail","RestorePassword","restorePsw","setEmail","restorePasswordWrapper","style","color","href","from","console","log","getEmailConfirmation","App","render","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","unregister"],"mappings":"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","file":"static/js/main.78ed610a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"NewPassword_container__IvbtZ\",\"errorMsg\":\"NewPassword_errorMsg__2m3xK\",\"btn\":\"NewPassword_btn__3R1Td\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Preloader_wrapper__SnQP1\",\"img\":\"Preloader_img__qADR8\"};","module.exports = __webpack_public_path__ + \"static/media/loader.aa8b6d13.svg\";","import axios from 'axios'\r\n\r\n\r\nconst instance = axios.create({\r\n    //baseURL: 'http://localhost:7542/2.0/',\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n})\r\n\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginResponseType>('auth/login', data)\r\n    },\r\n    me() {\r\n        return instance.post<LoginResponseType>('auth/me')\r\n    },\r\n    forgot(data: ForgotParamsType) {\r\n        return instance.post<ForgotResponseType>('auth/forgot', data)\r\n    },\r\n    sendNewPassword(data: NewPasswordParamsType) {\r\n        return instance.post<any>('auth/set-new-password', data)\r\n    },\r\n    registration(data: RegistrationParamsType) {\r\n        return instance.post<RegistrationResponseType>('auth/register', data)\r\n    },\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    password: string,\r\n    email: string,\r\n    rememberMe: boolean\r\n}\r\n\r\nexport type LoginResponseType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number // количество колод\r\n\r\n    created: string\r\n    updated: string\r\n    isAdmin: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    rememberMe: boolean;\r\n\r\n    error: string;\r\n}\r\n\r\nexport type AddedUserType = {\r\n    email: string,\r\n    isAdmin: boolean,\r\n    __v: number,\r\n    _id: string\r\n}\r\n\r\nexport type RegistrationResponseType = {\r\n    addedUser: AddedUserType,\r\n    success: boolean\r\n}\r\n\r\nexport type LoginResponseErrorType = {\r\n    body: LoginParamsType\r\n    error: string\r\n    method: string\r\n    query: {}\r\n    url: string\r\n}\r\n\r\nexport type ForgotParamsType = {\r\n    email: string\r\n    from: string\r\n    message: string\r\n}\r\n\r\nexport type ForgotResponseType = {\r\n    answer: boolean\r\n    html: boolean\r\n    info: string\r\n    success: boolean\r\n}\r\n\r\nexport type NewPasswordParamsType = {\r\n    password: string\r\n    resetPasswordToken: string\r\n}\r\n\r\nexport type RegistrationParamsType = {\r\n    email: string\r\n    password: string\r\n    repeatPassword?: string\r\n}\r\n\r\nexport type FormErrorType = {\r\n    email?: string\r\n    password?: string\r\n    repeatPassword?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n","let initialState: RequestReducerStateType = {\r\n    error: '',\r\n    isFetching: false\r\n}\r\n\r\nexport const requestReducer = (state: RequestReducerStateType = initialState, action: InitReducerActionsType) => {\r\n    switch (action.type) {\r\n        case 'REQUEST_ERROR':\r\n            return {...state, error: action.error}\r\n        case 'REQUEST_IS_FETCHING':\r\n            return {...state, isFetching: action.isFetching}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const errorAC = (error: string) => ({type: 'REQUEST_ERROR', error} as const)\r\nexport const isFetchingAC = (isFetching: boolean) => ({type: 'REQUEST_IS_FETCHING', isFetching} as const)\r\n\r\n\r\n// TYPES\r\nexport type RequestReducerStateType = {\r\n    error: string\r\n    isFetching: boolean\r\n}\r\n\r\nexport type ErrorACType = ReturnType<typeof errorAC>\r\nexport type isFetchingACType = ReturnType<typeof isFetchingAC>\r\n\r\ntype InitReducerActionsType = ErrorACType | isFetchingACType\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import Cookies from \"universal-cookie\";\r\n\r\nexport const cookies = new Cookies();\r\n\r\nexport const setCookie = (name: string, value: string) => {\r\n    return cookies.set(name, value, {path: '/'});\r\n}\r\n\r\nexport const getCookie = (name: string) => {\r\n    return cookies.get(name)\r\n}\r\n\r\n","import {authAPI, LoginResponseType} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {errorAC, ErrorACType, isFetchingAC, isFetchingACType} from \"./request-reducer\";\r\nimport {getCookie} from \"../utils/cookies\";\r\n\r\nlet initialState: InitialStateType = {\r\n    success: false,\r\n    profile: {\r\n        _id: '',\r\n        email: '',\r\n        name: '',\r\n        avatar: '',\r\n        publicCardPacksCount: 0,\r\n        created: '',\r\n        updated: '',\r\n        isAdmin: false,\r\n        verified: false,\r\n        rememberMe: false,\r\n        error: '',\r\n    }\r\n}\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'GET_USER_DATA':\r\n            return {...state, profile: action.profile}\r\n        case 'AUTH_SUCCESS':\r\n            return {...state, success: action.success}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const getUserDataAC = (profile: LoginResponseType) => ({type: 'GET_USER_DATA', profile} as const)\r\nexport const authSucessAC = (success: boolean) => ({type: 'AUTH_SUCCESS', success} as const)\r\n\r\n// THUNK\r\nexport const getUserDataTC = () => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType | authSucessACType>) => {\r\n    dispatch(isFetchingAC(true))\r\n    authAPI.me()\r\n        .then(res => {\r\n            dispatch(isFetchingAC(false))\r\n            dispatch(getUserDataAC(res.data))\r\n            dispatch(authSucessAC(true))\r\n            const cookie = getCookie('user_id')\r\n\r\n        })\r\n        .catch((error) => {\r\n            dispatch(errorAC(error.response.data.error))\r\n            dispatch(isFetchingAC(false))\r\n        })\r\n}\r\n\r\n// TYPES\r\nexport type InitialStateType = {\r\n    success: boolean\r\n    profile: LoginResponseType\r\n}\r\n\r\nexport type ActionsType = getUserDataACType | authSucessACType\r\n\r\nexport type getUserDataACType = ReturnType<typeof getUserDataAC>\r\nexport type authSucessACType = ReturnType<typeof authSucessAC>\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI, LoginParamsType} from \"../api/api\";\r\nimport {errorAC, ErrorACType, isFetchingAC, isFetchingACType} from \"./request-reducer\";\r\nimport {getUserDataAC} from \"./profile-reducer\";\r\nimport {setCookie} from \"../utils/cookies\";\r\n\r\nconst initialState: InitialStateType = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const loginReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'LOGIN':\r\n            return {...state, isLoggedIn: action.value}\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// action creators\r\nexport const setIsLoggedInAC = (value: boolean) => ({type: 'LOGIN', value} as const)\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType | any>) => {\r\n    dispatch(isFetchingAC(true))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            dispatch(isFetchingAC(false))\r\n            if (res.status === 200) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(getUserDataAC(res.data))\r\n                setCookie('user_id', res.data._id)\r\n            } else {\r\n                dispatch(errorAC('Oops...Something went wrong. Please try again later'))\r\n                dispatch(setIsLoggedInAC(false))\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            dispatch(errorAC(error.response.data.error))\r\n            dispatch(isFetchingAC(false))\r\n        })\r\n}\r\n\r\n\r\n// TYPES\r\ntype InitialStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n\r\nexport type ActionsType = setIsLoggedInACType\r\n\r\nexport type setIsLoggedInACType = ReturnType<typeof setIsLoggedInAC>\r\n\r\n","import React from 'react';\r\nimport styles from './Preloader.module.css';\r\nimport preloader from '../../../assets/images/loader.svg';\r\n\r\nconst Preloader = React.memo(() => {\r\n\treturn (\r\n\t\t\t<div className={styles.wrapper}>\r\n\t\t\t\t<img src={preloader} className={styles.img} alt='loader'/>\r\n\t\t\t</div>\r\n\t)\r\n})\r\n\r\nexport default Preloader;","import React from 'react';\r\nimport styles from './Login.module.css';\r\nimport {NavLink, Redirect} from 'react-router-dom'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../reducers/store\";\r\nimport {loginTC} from \"../../reducers/login-reducer\";\r\nimport {LOGIN, PROFILE, REGISTRATION, RESTORE_PASSWORD} from \"../../route\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {useFormik} from \"formik\";\r\nimport {FormErrorType, LoginParamsType} from \"../../api/api\";\r\n\r\nconst validate = (values: LoginParamsType) => {\r\n    const errors: FormErrorType = {};\r\n\r\n    if (!values.email) {\r\n        errors.email = 'Required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n    }\r\n\r\n    if (!values.password) {\r\n        errors.password = 'Required';\r\n    } else if (values.password.length < 8) {\r\n        errors.password = 'Must be more than 8 characters';\r\n    }\r\n    return errors;\r\n};\r\n\r\nconst Login = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    const requestIsFetching = useSelector<AppRootStateType, boolean>(state => state.request.isFetching)\r\n    const errorMsg = useSelector<AppRootStateType, string>(state => state.request.error)\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate,\r\n        onSubmit: (values: LoginParamsType) => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    });\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={PROFILE}/>\r\n    }\r\n\r\n    return (\r\n<div>\r\n    <h1>Login</h1>\r\n    <form onSubmit={formik.handleSubmit}>\r\n\r\n        {requestIsFetching && <Preloader/>}\r\n        {errorMsg && <p><strong>{errorMsg}</strong></p>}\r\n\r\n        <label htmlFor=\"email\">Email Address</label>\r\n        <input\r\n            {...formik.getFieldProps('email')}\r\n        />\r\n        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n        <br/>\r\n        <label htmlFor=\"password\">Password</label>\r\n        <input\r\n            type='password'\r\n            {...formik.getFieldProps('password')}\r\n        />\r\n        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n        <br/>\r\n        <label htmlFor=\"password\">remember me</label>\r\n        <input\r\n            type='checkbox'\r\n            {...formik.getFieldProps('rememberMe')}\r\n        />\r\n        <br/>\r\n        <button type=\"submit\">Submit</button>\r\n    </form>\r\n    <br/>\r\n\r\n    <NavLink to={RESTORE_PASSWORD}>Forgot Password?</NavLink>\r\n    <br/>\r\n    <NavLink to={REGISTRATION}>Registration</NavLink>\r\n</div>\r\n    );\r\n};\r\n\r\nexport default Login;","export const LOGIN = '/login';\r\nexport const NEW_PASSWORD = '/set-new-password/:token?'\r\nexport const PROFILE = '/profile'\r\nexport const REGISTRATION = '/registration'\r\nexport const RESTORE_PASSWORD = '/restore-password'","import {Dispatch} from 'redux'\r\nimport {authAPI} from '../api/api'\r\n\r\nconst SET_RESULT = 'SET_RESULT'\r\n\r\nconst initialState = {\r\n   success: null as null | boolean,\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const newPswReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n   switch (action.type) {\r\n      case 'SET_RESULT':\r\n         return {\r\n            ...state,\r\n            success: action.payload,\r\n         }\r\n      default:\r\n         return state\r\n   }\r\n}\r\n\r\n// actions\r\n\r\nexport const setResult = (value: boolean) => ({\r\n   type: SET_RESULT,\r\n   payload: value,\r\n} as const)\r\ntype SetResultActionType = ReturnType<typeof setResult>\r\n\r\n// thunks\r\n\r\nexport const setNewPassword = (password: string, token: string) =>\r\n   async (dispatch: ThunkDispatchType) => {\r\n      const res = await authAPI.sendNewPassword({\r\n         password,\r\n         resetPasswordToken: token,\r\n      })\r\n      try {\r\n         if (res.status === 200) {\r\n            dispatch(setResult(true))\r\n         } else {\r\n            dispatch(setResult(false))\r\n         }\r\n      } catch (error) {\r\n         dispatch(setResult(false))\r\n         throw error\r\n      }\r\n   }\r\n\r\n// TYPES\r\n\r\ntype ActionsType = SetResultActionType\r\ntype ThunkDispatchType = Dispatch<ActionsType>\r\n","import React, {ChangeEvent} from 'react'\r\nimport {useParams} from 'react-router-dom'\r\nimport classes from './NewPassword.module.css'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {setNewPassword} from '../../reducers/newPassword-reducer'\r\nimport {AppRootStateType} from '../../reducers/store'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {LOGIN} from '../../route'\r\n\r\nconst NewPassword = () => {\r\n\r\n   const dispatch = useDispatch()\r\n   const {token} = useParams()\r\n   const success = useSelector<AppRootStateType, null | boolean>(state => state.newPsw.success)\r\n\r\n   const [firstNewPassword, setFirstNewPassword] = React.useState<string>('')\r\n   const [secondNewPassword, setSecondNewPassword] = React.useState<string>('')\r\n   const [error, setError] = React.useState<string>('')\r\n\r\n   const handleSetFirstNewPassword = (e: ChangeEvent<HTMLInputElement>) => {\r\n      setError('')\r\n      setFirstNewPassword(e.currentTarget.value)\r\n   }\r\n   const handleSetSecondNewPassword = (e: ChangeEvent<HTMLInputElement>) => {\r\n      setError('')\r\n      setSecondNewPassword(e.currentTarget.value)\r\n   }\r\n\r\n   const onClickSend = () => {\r\n      if (firstNewPassword.trim() === secondNewPassword.trim() && firstNewPassword.trim() !== '') {\r\n         setFirstNewPassword('')\r\n         setSecondNewPassword('')\r\n         dispatch(setNewPassword(secondNewPassword.trim(), token))\r\n      } else if (firstNewPassword.trim() !== '' && firstNewPassword.trim() !== secondNewPassword.trim()) {\r\n         setError('Password mismatch')\r\n      } else {\r\n         setError('Check your new password')\r\n      }\r\n   }\r\n\r\n   if (success) {\r\n      return <Redirect to={LOGIN}/>\r\n   }\r\n\r\n   return (\r\n      <div>\r\n         <h1>New password</h1>\r\n         <div className={classes.container}>\r\n            <label htmlFor=\"first_password\">\r\n               <span>Enter a new password: </span>\r\n               <input type=\"password\" id=\"first_password\" value={firstNewPassword}\r\n                      onChange={handleSetFirstNewPassword}/>\r\n            </label>\r\n            <label htmlFor=\"second_password\">\r\n               <span>Confirm password: </span>\r\n               <input type=\"password\" id=\"second_password\" value={secondNewPassword}\r\n                      onChange={handleSetSecondNewPassword}/>\r\n            </label>\r\n            {error && <div className={classes.errorMsg}>{error}</div>}\r\n            <button className={classes.btn}\r\n                    onClick={onClickSend}\r\n                    disabled={!firstNewPassword.trim() || !secondNewPassword.trim()}>send</button>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default NewPassword\r\n","import React, {useEffect} from 'react';\r\nimport styles from './Profile.module.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../reducers/store\";\r\nimport {LoginResponseType} from \"../../api/api\";\r\nimport {getUserDataTC} from \"../../reducers/profile-reducer\";\r\nimport {LOGIN, PROFILE} from \"../../route\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {setIsLoggedInAC} from \"../../reducers/login-reducer\";\r\n\r\nconst Profile = () => {\r\n\r\n    const userData = useSelector<AppRootStateType, LoginResponseType>(state => state.profile.profile)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    const errorMsg = useSelector<AppRootStateType, string>(state => state.request.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const setLogOut = () => {\r\n        dispatch(setIsLoggedInAC(false))\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(getUserDataTC())\r\n    }, [])\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={LOGIN}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>Profile</h1>\r\n            <h3>name: {userData.name}</h3>\r\n            <p>email: {userData.email}</p>\r\n            <p>publicCardPacksCount: {userData.publicCardPacksCount}</p>\r\n            <div><img src={userData.avatar} alt={userData.name} width={200}/></div>\r\n            <button onClick={setLogOut}>LogOut</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import {authAPI, RegistrationParamsType} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {errorAC, ErrorACType, isFetchingAC, isFetchingACType} from \"./request-reducer\";\r\n\r\nconst initialState: InitialStateType = {\r\n    isRegistered: false\r\n}\r\n\r\nexport const registrationReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'REGISTRATION':\r\n            return {\r\n                ...state,\r\n                isRegistered: action.payload\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// THUNK\r\nexport const registrationTC = (data: RegistrationParamsType) => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType>) => {\r\n    dispatch(isFetchingAC(true))\r\n    authAPI.registration(data)\r\n        .then(res => {\r\n            dispatch(isFetchingAC(false))\r\n            if (res.status === 201) {\r\n                dispatch(registrationAC(true))\r\n            } else {\r\n                dispatch(errorAC('Oops...Something went wrong. Please try again later'))\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            dispatch(errorAC(error.message))\r\n            dispatch(isFetchingAC(false))\r\n        })\r\n}\r\n\r\nexport const registrationAC = (payload: boolean) => ({type: 'REGISTRATION', payload} as const)\r\n\r\n// TYPES\r\nexport type InitialStateType = {\r\n    isRegistered: boolean\r\n}\r\n\r\nexport type ActionsType = exampleACType\r\n\r\nexport type exampleACType = ReturnType<typeof registrationAC>\r\n","import React from 'react';\r\nimport styles from './Registration.module.css';\r\nimport {Redirect} from 'react-router-dom'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../reducers/store\";\r\nimport {LOGIN} from \"../../route\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {registrationTC} from \"../../reducers/registration-reducer\";\r\nimport {useFormik} from \"formik\";\r\nimport {FormErrorType, RegistrationParamsType} from \"../../api/api\";\r\n\r\nconst validate = (values: RegistrationParamsType) => {\r\n    const errors: FormErrorType = {};\r\n\r\n    if (!values.email) {\r\n        errors.email = 'Required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n    }\r\n\r\n    if (!values.password) {\r\n        errors.password = 'Required';\r\n    } else if (values.password.length < 8) {\r\n        errors.password = 'Must be more than 8 characters';\r\n    }\r\n\r\n    if (!values.repeatPassword) {\r\n        errors.repeatPassword = 'Required';\r\n    } else if (values.repeatPassword.length < 8) {\r\n        errors.repeatPassword = 'Must be more than 8 characters';\r\n    } else if (values.repeatPassword !== values.password) {\r\n        errors.repeatPassword = 'Incorrect repeated password';\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\n\r\nconst Registration = () => {\r\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.registration.isRegistered)\r\n    const requestIsFetching = useSelector<AppRootStateType, boolean>(state => state.request.isFetching)\r\n    const errorMsg = useSelector<AppRootStateType, string>(state => state.request.error)\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            repeatPassword: ''\r\n        },\r\n        validate,\r\n        onSubmit: values => {\r\n            const payload = {\r\n                email: values.email,\r\n                password: values.password\r\n            }\r\n            dispatch(registrationTC(payload))\r\n        },\r\n    });\r\n\r\n    if (isRegistered) {\r\n        return <Redirect to={LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n\r\n            {requestIsFetching && <Preloader/>}\r\n            {errorMsg && <p><strong>{errorMsg}</strong></p>}\r\n\r\n            <label htmlFor=\"email\">Email Address</label>\r\n            <input\r\n                {...formik.getFieldProps('email')}\r\n            />\r\n            {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n            <label htmlFor=\"password\">Password</label>\r\n            <input\r\n                type='password'\r\n                {...formik.getFieldProps('password')}\r\n            />\r\n            {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n            <label htmlFor=\"password\">Repeat Password</label>\r\n            <input\r\n                type='password'\r\n                {...formik.getFieldProps('repeatPassword')}\r\n            />\r\n            {formik.errors.repeatPassword ? <div>{formik.errors.repeatPassword}</div> : null}\r\n            <button type=\"submit\" disabled={formik.values.password !== formik.values.repeatPassword}>Submit</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Registration;","import {Dispatch} from 'redux'\r\nimport {authAPI} from '../api/api'\r\n\r\nconst SET_CONFIRMING = 'SET_CONFIRMING'\r\nconst SET_SELECTED_EMAIL = 'SET_SELECTED_EMAIL'\r\n\r\nconst initialState = {\r\n   selectedEmail: '' as string,\r\n   success: false as boolean,\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const restorePswReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n   switch (action.type) {\r\n      case 'SET_CONFIRMING':\r\n         return {\r\n            ...state,\r\n            success: action.payload,\r\n         }\r\n      case 'SET_SELECTED_EMAIL':\r\n         return {\r\n            ...state,\r\n            selectedEmail: action.payload,\r\n         }\r\n      default:\r\n         return state\r\n   }\r\n}\r\n\r\n// actions\r\n\r\nconst setConfirming = (value: boolean) => ({\r\n   type: SET_CONFIRMING,\r\n   payload: value,\r\n} as const)\r\ntype SetConfirmingActionType = ReturnType<typeof setConfirming>\r\n\r\nconst setSelectedEmail = (email: string) => ({\r\n   type: SET_SELECTED_EMAIL,\r\n   payload: email,\r\n} as const)\r\ntype SetSelectedEmail = ReturnType<typeof setSelectedEmail>\r\n\r\n// thunks\r\n\r\nexport const getEmailConfirmation = (email: string) =>\r\n   async (dispatch: ThunkDispatchType) => {\r\n      const message = `\r\n         <div style=\"background-color: lime; padding: 15px\">\t\r\n            password recovery link:\r\n            <a href='http://localhost:3000/memory-cards#/set-new-password'>\r\n            link</a>\r\n         </div>\r\n      `\r\n      const res = await authAPI.forgot({\r\n         email, // кому восстанавливать пароль\r\n         from: '<vladzyaba@mail.ru>', // можно указать разработчика фронта)\r\n         message: message,\r\n      })\r\n      try {\r\n         console.log(res)\r\n         if (res.data.success) {\r\n            dispatch(setConfirming(res.data.success))\r\n            dispatch(setSelectedEmail(email))\r\n         }\r\n      } catch (error) {\r\n         throw error\r\n      }\r\n   }\r\n\r\n// TYPES\r\n\r\ntype ActionsType\r\n   = SetConfirmingActionType\r\n   | SetSelectedEmail\r\ntype ThunkDispatchType = Dispatch<ActionsType>\r\n","import React, {ChangeEvent} from 'react'\r\nimport classes from '../NewPassword/NewPassword.module.css'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {getEmailConfirmation} from '../../reducers/restorePassword-reducer'\r\nimport {AppRootStateType} from '../../reducers/store'\r\n\r\nconst RestorePassword = () => {\r\n\r\n   const dispatch = useDispatch()\r\n   const success = useSelector<AppRootStateType, boolean>(state => state.restorePsw.success)\r\n   const selectedEmail = useSelector<AppRootStateType, string>(state => state.restorePsw.selectedEmail)\r\n   const [email, setEmail] = React.useState<string>('')\r\n\r\n   const handleSetEmail = (e: ChangeEvent<HTMLInputElement>) => setEmail(e.currentTarget.value)\r\n\r\n   const onClickSend = () => dispatch(getEmailConfirmation(email))\r\n\r\n   return (\r\n      <div className={classes.restorePasswordWrapper}>\r\n         <h1>Restore password</h1>\r\n         {\r\n            success &&\r\n            <div style={{color: 'green'}}>\r\n                Check your email: <a href={`mailto:${selectedEmail}`}>{selectedEmail}</a>\r\n                and follow the link in there\r\n            </div>\r\n         }\r\n         <label>\r\n            <span>enter your email:</span>\r\n            <input type=\"text\" value={email} onChange={handleSetEmail}/>\r\n         </label>\r\n         <button onClick={onClickSend} disabled={!email.trim()}>send</button>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default RestorePassword\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport {Route} from 'react-router-dom';\r\nimport {LOGIN, NEW_PASSWORD, PROFILE, REGISTRATION, RESTORE_PASSWORD} from \"./route\";\r\nimport Login from \"./components/Login/Login\";\r\nimport NewPassword from \"./components/NewPassword/NewPassword\";\r\nimport Profile from \"./components/Profile/Profile\";\r\nimport Registration from \"./components/Registration/Registration\";\r\nimport RestorePassword from './components/RestorePassword/RestorePassword'\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Route path={LOGIN} render={() => <Login/>}/>\r\n            <Route path={NEW_PASSWORD} render={() => <NewPassword/>}/>\r\n            <Route path={PROFILE} render={() => <Profile/>}/>\r\n            <Route path={REGISTRATION} render={() => <Registration/>}/>\r\n            <Route path={RESTORE_PASSWORD} render={() => <RestorePassword/>}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {loginReducer} from \"./login-reducer\";\r\nimport {newPswReducer} from \"./newPassword-reducer\";\r\nimport {restorePswReducer} from \"./restorePassword-reducer\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport {registrationReducer} from \"./registration-reducer\";\r\nimport {requestReducer} from \"./request-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    login: loginReducer,\r\n    newPsw: newPswReducer,\r\n    restorePsw: restorePswReducer,\r\n    profile: profileReducer,\r\n    registration: registrationReducer,\r\n    request: requestReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from \"./reducers/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <HashRouter>\r\n                <App/>\r\n            </HashRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}