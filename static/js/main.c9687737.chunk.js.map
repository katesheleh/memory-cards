{"version":3,"sources":["reducers/newPassword-reducer.ts","reducers/restorePassword-reducer.ts","reducers/registration-reducer.ts","components/common/Button/Button.module.scss","assets/images/loader.svg","reducers/login-reducer.ts","components/Login/Login.tsx","components/Profile/Profile.tsx","components/Navbar/Navbar.tsx","components/Header/Header.tsx","api/cards-api.ts","reducers/cards-reducer.ts","components/Cards/Cards.tsx","api/pack-api.ts","reducers/pack-reducer.ts","components/common/Preloader/Preloader.tsx","components/Packs/Packs.tsx","App.tsx","components/common/Checkbox/Checkbox.tsx","serviceWorker.ts","reducers/store.ts","index.tsx","components/common/Button/Button.tsx","api/api.ts","components/Navbar/Navbar.module.scss","reducers/request-reducer.ts","api/auth-api.ts","components/common/Input/Input.module.scss","components/common/Icons/Icons.tsx","route.ts","components/Login/Login.module.scss","components/Cards/Cards.module.scss","components/Packs/Packs.module.scss","components/common/Input/Input.tsx","components/common/Checkbox/Checkbox.module.scss","components/Header/Header.module.scss","components/common/Preloader/Preloader.module.css"],"names":["initialState","success","newPswReducer","state","action","type","payload","setResult","value","setNewPassword","password","token","dispatch","isFetchingAC","authAPI","sendNewPassword","resetPasswordToken","then","res","status","errorAC","catch","error","message","finally","selectedEmail","restorePswReducer","getEmailConfirmation","email","forgot","from","data","setSelectedEmail","isRegistered","registrationReducer","registrationTC","registration","module","exports","isLoggedIn","profile","setIsLoggedInAC","authMeAC","authSucessTC","authMe","validationSchema","Yup","required","min","React","memo","useSelector","login","errorMsg","request","useDispatch","formik","useFormik","initialValues","rememberMe","onSubmit","values","to","PROFILE","className","classes","container","handleSubmit","formItem","Input","labelTitle","errors","getFieldProps","htmlFor","Button","subLinks","RESTORE_PASSWORD","REGISTRATION","userData","name","publicCardPacksCount","PACKS","src","avatar","alt","width","onClick","logout","LOGIN","useEffect","document","body","addEventListener","handleOutsideClick","useState","activeMenu","setActiveMenu","menuRef","useRef","event","path","composedPath","includes","current","onClickLink","menu","ref","menuTitle","switch","active","prevState","switchLine","navbar","LINKS","activeClassName","activeLink","header","cardsAPI","cardsPack_id","instance","get","getCards","cardsTotalCount","maxGrade","minGrade","page","pageCount","Cards","cards","cardId","useParams","table","tableHeader","tableRow","map","c","key","_id","question","answer","packAPI","user_id","post","cardsPack","pack_id","delete","cardPacks","cardPacksTotalCount","maxCardsCount","minCardsCount","tokenDeathTime","getPackTC","styles","wrapper","preloader","img","Packs","requestIsFetching","isFetching","packs","removePack","removePackAC","removePackTC","addPack","addPackTC","pack","Registration","props","restProps","label","checkbox","customCheckbox","lazy","RestorePassword","NewPassword","NotFound","App","fallback","exact","render","paths","component","Boolean","window","location","hostname","match","rootReducer","combineReducers","newPsw","restorePsw","requestReducer","filter","newPack","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","unregister","console","btn","axios","create","baseURL","withCredentials","library","add","fas","iconDefinition","iconName","pref","Lookup","prefix","findIconDefinition","Icons","SignInAlt","icon","SignOutAlt","Key","Lock","Error","Eye","EyeSlash","SearchLocation","NEW_PASSWORD","CARDS","showPassword","setShowPassword","handleShowPassword","input","errorMessage"],"mappings":"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","file":"static/js/main.c9687737.chunk.js","sourcesContent":["import {Dispatch} from 'redux'\r\nimport {authAPI} from '../api/auth-api'\r\nimport {errorAC, ErrorACType, isFetchingAC, isFetchingACType} from './request-reducer'\r\n\r\nconst SET_RESULT = 'SET_RESULT'\r\n\r\nconst initialState = {\r\n   success: null as null | boolean,\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const newPswReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n   switch (action.type) {\r\n      case 'SET_RESULT':\r\n         return {\r\n            ...state,\r\n            success: action.payload,\r\n         }\r\n      default:\r\n         return state\r\n   }\r\n}\r\n\r\n// actions\r\n\r\nexport const setResult = (value: boolean) => ({\r\n   type: SET_RESULT,\r\n   payload: value,\r\n} as const)\r\ntype SetResultActionType = ReturnType<typeof setResult>\r\n\r\n// thunks\r\n\r\nexport const setNewPassword = (password: string, token: string) =>\r\n   (dispatch: ThunkDispatchType) => {\r\n      dispatch(isFetchingAC(true))\r\n      authAPI.sendNewPassword({\r\n         password,\r\n         resetPasswordToken: token,\r\n      }).then(res => {\r\n         if (res.status === 200) {\r\n            dispatch(setResult(true))\r\n         } else {\r\n            dispatch(setResult(false))\r\n            dispatch(errorAC('Oops...Something went wrong. Please try again later'))\r\n         }\r\n      }).catch(error => {\r\n         dispatch(setResult(false))\r\n         dispatch(errorAC(error.message))\r\n      }).finally(() => {\r\n         dispatch(isFetchingAC(false))\r\n      })\r\n   }\r\n\r\n// TYPES\r\n\r\ntype ActionsType = SetResultActionType\r\ntype ThunkDispatchType = Dispatch<ActionsType | isFetchingACType | ErrorACType>\r\n","import {Dispatch} from 'redux'\r\nimport {authAPI} from '../api/auth-api'\r\nimport {errorAC, ErrorACType, isFetchingAC, isFetchingACType} from './request-reducer'\r\n\r\nconst SET_CONFIRMING = 'SET_CONFIRMING'\r\nconst SET_SELECTED_EMAIL = 'SET_SELECTED_EMAIL'\r\n\r\nconst initialState = {\r\n   selectedEmail: '' as string,\r\n   success: false as boolean,\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const restorePswReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n   switch (action.type) {\r\n      case 'SET_CONFIRMING':\r\n         return {\r\n            ...state,\r\n            success: action.payload,\r\n         }\r\n      case 'SET_SELECTED_EMAIL':\r\n         return {\r\n            ...state,\r\n            selectedEmail: action.payload,\r\n         }\r\n      default:\r\n         return state\r\n   }\r\n}\r\n\r\n// actions\r\n\r\nconst setConfirming = (value: boolean) => ({\r\n   type: SET_CONFIRMING,\r\n   payload: value,\r\n} as const)\r\ntype SetConfirmingActionType = ReturnType<typeof setConfirming>\r\n\r\nconst setSelectedEmail = (email: string) => ({\r\n   type: SET_SELECTED_EMAIL,\r\n   payload: email,\r\n} as const)\r\ntype SetSelectedEmail = ReturnType<typeof setSelectedEmail>\r\n\r\n// thunks\r\n\r\nexport const getEmailConfirmation = (email: string) =>\r\n   (dispatch: ThunkDispatchType) => {\r\n      const message = `\r\n         <div style=\"background-color: lime; padding: 15px\">\t\r\n            password recovery link:\r\n            <a href='http://localhost:3000/memory-cards#/set-new-password/$token$'>\r\n            link</a>\r\n         </div>\r\n      `\r\n      dispatch(isFetchingAC(true))\r\n      authAPI.forgot({\r\n         email, // кому восстанавливать пароль\r\n         from: `<${email}>`, // можно указать разработчика фронта)\r\n         message: message,\r\n      }).then(res => {\r\n            if (res.data.success) {\r\n               dispatch(setConfirming(res.data.success))\r\n               dispatch(setSelectedEmail(email))\r\n            } else if (res.data.success) {\r\n               dispatch(errorAC('Oops...Something went wrong. Please try again later'))\r\n            }\r\n         },\r\n      ).catch(error => {\r\n         dispatch(errorAC(error.message))\r\n      }).finally(() => {\r\n         dispatch(isFetchingAC(false))\r\n      })\r\n   }\r\n\r\n// TYPES\r\n\r\ntype ActionsType\r\n   = SetConfirmingActionType\r\n   | SetSelectedEmail\r\n\r\ntype ThunkDispatchType = Dispatch<ActionsType | isFetchingACType | ErrorACType>\r\n","import {authAPI, RegistrationParamsType} from '../api/auth-api'\r\nimport {Dispatch} from 'redux'\r\nimport {errorAC, ErrorACType, isFetchingAC, isFetchingACType} from './request-reducer'\r\n\r\nconst initialState = {\r\n   isRegistered: false as boolean,\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const registrationReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n   switch (action.type) {\r\n      case 'REGISTRATION':\r\n         return {\r\n            ...state,\r\n            isRegistered: action.payload,\r\n         }\r\n\r\n      default:\r\n         return state\r\n   }\r\n}\r\n\r\n// actions\r\nexport const registrationAC = (payload: boolean) => ({type: 'REGISTRATION', payload} as const)\r\n\r\n// THUNK\r\nexport const registrationTC = (data: RegistrationParamsType) => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType>) => {\r\n   dispatch(isFetchingAC(true))\r\n   authAPI.registration(data)\r\n      .then(res => {\r\n         dispatch(isFetchingAC(false))\r\n         if (res.status === 201) {\r\n            dispatch(registrationAC(true))\r\n         } else {\r\n            dispatch(errorAC('Oops...Something went wrong. Please try again later'))\r\n         }\r\n      })\r\n      .catch((error) => {\r\n         dispatch(errorAC(error.message))\r\n         dispatch(isFetchingAC(false))\r\n      })\r\n}\r\n\r\n// TYPES\r\nexport type ActionsType = exampleACType\r\nexport type exampleACType = ReturnType<typeof registrationAC>\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__nA1Ui\"};","module.exports = __webpack_public_path__ + \"static/media/loader.aa8b6d13.svg\";","import {Dispatch} from 'redux'\r\nimport {authAPI, LoginParamsType, LoginResponseType} from '../api/auth-api'\r\nimport {errorAC, ErrorACType, isFetchingAC, isFetchingACType} from './request-reducer'\r\n\r\nconst initialState = {\r\n   isLoggedIn: false,\r\n   profile: {} as LoginResponseType,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const loginReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n   switch (action.type) {\r\n      case 'LOGIN':\r\n         return {...state, isLoggedIn: action.value}\r\n      case 'GET_USER_DATA':\r\n         return {...state, profile: action.profile}\r\n      case 'AUTH_ME':\r\n         return {...state, isLoggedIn: action.success}\r\n      default:\r\n         return state\r\n   }\r\n}\r\n\r\n// action creators\r\nexport const setIsLoggedInAC = (value: boolean) => ({type: 'LOGIN', value} as const)\r\nexport const getUserDataAC = (profile: LoginResponseType) => ({type: 'GET_USER_DATA', profile} as const)\r\nexport const authMeAC = (success: boolean) => ({type: 'AUTH_ME', success} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType | any>) => {\r\n   dispatch(isFetchingAC(true))\r\n   authAPI.login(data)\r\n      .then(res => {\r\n         dispatch(isFetchingAC(false))\r\n         if (res.status === 200) {\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(getUserDataAC(res.data))\r\n         } else {\r\n            dispatch(errorAC('Oops...Something went wrong. Please try again later'))\r\n            dispatch(setIsLoggedInAC(false))\r\n         }\r\n      })\r\n      .catch((error) => {\r\n         //dispatch(errorAC(error.response.data.error))\r\n         dispatch(isFetchingAC(false))\r\n      })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType | authSucessACType>) => {\r\n   dispatch(isFetchingAC(true))\r\n   authAPI.logout()\r\n       .then(res => {\r\n          dispatch(isFetchingAC(false))\r\n          dispatch(authMeAC(false))\r\n       })\r\n       .catch((error) => {\r\n          //dispatch(errorAC(error.response.data.error))\r\n          dispatch(isFetchingAC(false))\r\n       })\r\n}\r\n\r\nexport const authSucessTC = () => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType | authSucessACType>) => {\r\n    dispatch(isFetchingAC(true))\r\n    authAPI.authMe()\r\n        .then(res => {\r\n            dispatch(isFetchingAC(false))\r\n            dispatch(authMeAC(true))\r\n        })\r\n        .catch((error) => {\r\n            //dispatch(errorAC(error.response.data.error))\r\n            dispatch(isFetchingAC(false))\r\n        })\r\n}\r\n\r\n// TYPES\r\nexport type ActionsType = setIsLoggedInACType | getUserDataACType | authSucessACType\r\nexport type setIsLoggedInACType = ReturnType<typeof setIsLoggedInAC>\r\nexport type getUserDataACType = ReturnType<typeof getUserDataAC>\r\nexport type authSucessACType = ReturnType<typeof authMeAC>\r\n","import React from 'react'\r\nimport classes from './Login.module.scss'\r\nimport {NavLink, Redirect} from 'react-router-dom'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../reducers/store'\r\nimport {loginTC} from '../../reducers/login-reducer'\r\nimport {PROFILE, REGISTRATION, RESTORE_PASSWORD} from '../../route'\r\nimport Preloader from '../common/Preloader/Preloader'\r\nimport {useFormik} from 'formik'\r\nimport Input from '../common/Input/Input'\r\nimport Button from '../common/Button/Button'\r\nimport * as Yup from 'yup'\r\n\r\nconst validationSchema = () => Yup.object({\r\n   email: Yup.string()\r\n      .email('Invalid email address')\r\n      .required('Required'),\r\n   password: Yup.string()\r\n      .required('Required')\r\n      .min(8, 'Must be 8 characters or less'),\r\n})\r\n\r\nconst Login = () => {\r\n   const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n   const errorMsg = useSelector<AppRootStateType, string>(state => state.request.error)\r\n   const dispatch = useDispatch()\r\n\r\n   const formik = useFormik({\r\n      initialValues: {\r\n         email: '',\r\n         password: '',\r\n         rememberMe: false,\r\n      },\r\n      validationSchema,\r\n      onSubmit: values => {\r\n         dispatch(loginTC(values))\r\n      },\r\n   })\r\n\r\n   if (isLoggedIn) {\r\n      return <Redirect to={PROFILE}/>\r\n   }\r\n\r\n   return (\r\n      <div className={classes.container}>\r\n         <h1>Login</h1>\r\n         <form onSubmit={formik.handleSubmit}>\r\n\r\n            {errorMsg && <p><strong>{errorMsg}</strong></p>}\r\n\r\n            <div className={classes.formItem}>\r\n               <Input labelTitle={'Email'}\r\n                      error={formik.errors.email}\r\n                      {...formik.getFieldProps('email')}/>\r\n            </div>\r\n\r\n            <div className={classes.formItem}>\r\n               <Input type='password'\r\n                      labelTitle={'Password'}\r\n                      error={formik.errors.password}\r\n                      {...formik.getFieldProps('password')}/>\r\n            </div>\r\n\r\n            <div className={classes.formItem}>\r\n               <label htmlFor=\"password\">remember me</label>\r\n               <input\r\n                  type='checkbox'\r\n                  {...formik.getFieldProps('rememberMe')}/>\r\n            </div>\r\n\r\n            <Button type=\"submit\" labelTitle={'Send'}/>\r\n         </form>\r\n\r\n         <div className={classes.subLinks}>\r\n            <NavLink to={RESTORE_PASSWORD}>Forgot Password?</NavLink>\r\n            <NavLink to={REGISTRATION}>Registration</NavLink>\r\n         </div>\r\n\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default React.memo(Login)","import React from 'react';\r\nimport styles from './Profile.module.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../reducers/store\";\r\nimport {LoginResponseType} from \"../../api/auth-api\";\r\nimport {LOGIN, PACKS, PROFILE} from \"../../route\";\r\nimport {Link, Redirect} from \"react-router-dom\";\r\nimport {setIsLoggedInAC, logoutTC} from \"../../reducers/login-reducer\";\r\nimport Button from \"../common/Button/Button\";\r\n\r\nconst Profile = () => {\r\n\r\n    const userData = useSelector<AppRootStateType, LoginResponseType>(state => state.login.profile)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const setLogOut = () => {\r\n        dispatch(logoutTC())\r\n        dispatch(setIsLoggedInAC(false))\r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Profile</h1>\r\n            <h3>name: {userData.name}</h3>\r\n            <p>email: {userData.email}</p>\r\n            <p>publicCardPacksCount: {userData.publicCardPacksCount}</p>\r\n            <p><u><Link to={PACKS}>See my card packs</Link></u></p>\r\n            <div><img src={userData.avatar} alt={userData.name} width={200}/></div>\r\n            <Button onClick={setLogOut} labelTitle={'LogOut'}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(Profile)","import React from 'react'\r\nimport classes from './Navbar.module.scss'\r\nimport {NavLink} from 'react-router-dom'\r\nimport * as LINKS from '../../route'\r\n\r\nconst Navbar = () => {\r\n\r\n   React.useEffect(() => {\r\n      document.body.addEventListener('click', handleOutsideClick)\r\n   })\r\n\r\n   const [activeMenu, setActiveMenu] = React.useState<boolean>(false)\r\n\r\n   const menuRef = React.useRef<HTMLDivElement>(null)\r\n\r\n   const handleOutsideClick = (event: MouseEvent | any) => {\r\n      const path = event.path || (event.composedPath && event.composedPath()) // firefox uses composedPath\r\n      if (!path.includes(menuRef.current)) {\r\n         setActiveMenu(false)\r\n      }\r\n\r\n   }\r\n\r\n   const onClickSwitch = () => setActiveMenu(prevState => !prevState)\r\n   const onClickLink = () => setActiveMenu(false)\r\n\r\n   return (\r\n      <div className={classes.menu} ref={menuRef}>\r\n         <div className={classes.menuTitle}>Menu</div>\r\n         <div className={`${classes.switch} ${activeMenu ? classes.active : ''}`} onClick={onClickSwitch}>\r\n            <div className={classes.switchLine}></div>\r\n            <div className={classes.switchLine}></div>\r\n            <div className={classes.switchLine}></div>\r\n         </div>\r\n         <nav className={classes.navbar}>\r\n            <NavLink to={LINKS.LOGIN} activeClassName={classes.activeLink} onClick={onClickLink}>login</NavLink>\r\n            <NavLink to={LINKS.PROFILE} activeClassName={classes.activeLink} onClick={onClickLink}>profile</NavLink>\r\n            <NavLink to={LINKS.PACKS} activeClassName={classes.activeLink} onClick={onClickLink}>card packs</NavLink>\r\n            <NavLink to={LINKS.REGISTRATION} activeClassName={classes.activeLink} onClick={onClickLink}>registration</NavLink>\r\n            <NavLink to={LINKS.RESTORE_PASSWORD} activeClassName={classes.activeLink} onClick={onClickLink}>restore password</NavLink>\r\n         </nav>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default React.memo(Navbar)\r\n","import React from 'react'\r\nimport classes from './Header.module.scss'\r\nimport Navbar from '../Navbar/Navbar'\r\n\r\nconst Header = () => {\r\n   return (\r\n      <header className={classes.header}>\r\n         <div className={classes.container}>\r\n            <div>Logo</div>\r\n            <Navbar/>\r\n         </div>\r\n      </header>\r\n   )\r\n}\r\n\r\nexport default React.memo(Header)\r\n","import {instance} from \"./api\";\r\n\r\n\r\nexport const cardsAPI = {\r\n    getCards(cardsPack_id: string) {\r\n        return instance.get<CardsResponseType>(`cards/card?cardsPack_id=${cardsPack_id}&pageCount=20`)\r\n    },\r\n}\r\n\r\n\r\nexport type CardsResponseType = {\r\n    getCards: Array<CardsType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n}\r\n\r\nexport type CardsType = {\r\n    answer: string\r\n    question: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    user_id: string\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    _id: string\r\n}","import {Dispatch} from \"redux\";\r\nimport {errorAC, ErrorACType, isFetchingAC, isFetchingACType} from \"./request-reducer\";\r\nimport {cardsAPI, CardsType} from \"../api/cards-api\";\r\n\r\nlet initialState = {\r\n    getCards: [] as CardsType[],\r\n    cardsTotalCount: 0,\r\n    maxGrade: 0,\r\n    minGrade: 0,\r\n    page: 0,\r\n    pageCount: 0\r\n}\r\n\r\nexport const cardsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_CARDS':\r\n            return {...state, getCards: action.getCards}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// AC\r\nexport const setCardsAC = (getCards: CardsType[]) => ({type: 'SET_CARDS', getCards} as const)\r\n\r\n\r\n// thunks\r\nexport const getCardsTC = (cardsPack_id: string) => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType>) => {\r\n    dispatch(isFetchingAC(true))\r\n    cardsAPI.getCards(cardsPack_id)\r\n        .then(res => {\r\n            dispatch(isFetchingAC(false))\r\n            dispatch(setCardsAC(res.data.getCards))\r\n        })\r\n        .catch((error) => {\r\n            //dispatch(errorAC(error.response.data.error))\r\n            dispatch(isFetchingAC(false))\r\n        })\r\n}\r\n\r\n\r\ntype InitialStateType = {\r\n    getCards: Array<CardsType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n}\r\n\r\ntype ActionsType = setCardsACType\r\n\r\n\r\nexport type setCardsACType = ReturnType<typeof setCardsAC>\r\n\r\n\r\n","import React, {useEffect} from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../reducers/store\";\r\nimport {getCardsTC} from \"../../reducers/cards-reducer\";\r\nimport {CardsType} from \"../../api/cards-api\";\r\nimport {Link, useParams} from \"react-router-dom\";\r\nimport Button from \"../common/Button/Button\";\r\nimport {PACKS} from \"../../route\";\r\nimport classes from './Cards.module.scss';\r\n\r\nconst Cards = () => {\r\n\r\n    const cards = useSelector<AppRootStateType, Array<CardsType>>(state => state.cards.getCards)\r\n    const {cardId} = useParams();\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getCardsTC(cardId))\r\n    }, [])\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <h1>Cards</h1>\r\n            <Link to={PACKS}><Button labelTitle={'Back to Packs'}/></Link>\r\n            <div className={classes.table}>\r\n                <div className={`${classes.tableHeader} ${classes.tableRow}`}>\r\n                    <div><strong>Question</strong></div>\r\n                    <div><strong>Answer</strong></div>\r\n                    <div><strong>Actions</strong></div>\r\n                </div>\r\n\r\n                {cards && cards.map(c => <div key={c._id} className={classes.tableRow}>\r\n                        <div>{c.question}</div>\r\n                        <div>{c.answer}</div>\r\n                        <div><Button labelTitle={'Edit'}/><Button labelTitle={'Delete'}/></div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;\r\n\r\n","import {instance} from \"./api\";\r\n\r\n\r\nexport const packAPI = {\r\n    getCardPacksUser(user_id: string) {\r\n        return instance.get<CardsPackResponseType>(`cards/pack?user_id=${user_id}&pageCount=20`)\r\n    },\r\n    getCardPacksAll() {\r\n        return instance.get<CardsPackResponseType>(`cards/pack`)\r\n    },\r\n    addCardPack(name: string) {\r\n        return instance.post<NewCardsPackResponseType>(`cards/pack`, {\r\n            cardsPack: {\r\n                name: name\r\n            }\r\n        })\r\n    },\r\n    removeCardPack(pack_id: string) {\r\n        return instance.delete<CardsPackResponseType>(`cards/pack?id=${pack_id}`)\r\n    },\r\n}\r\n\r\n\r\nexport type CardsPackResponseType = {\r\n    cardPacks: Array<CardsPackType>\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\nexport type NewCardsPackResponseType = {\r\n    newCardsPack: newCardsType\r\n}\r\n\r\nexport type newCardsType = {\r\n    name: string\r\n    path: string\r\n    grade: number\r\n    shots: number\r\n    rating: number\r\n    deckCover: string\r\n    private: boolean\r\n    type: string\r\n}\r\n\r\nexport type CardsPackType = {\r\n    cardsCount: number\r\n    created: string\r\n    deckCover: string\r\n    grade: number\r\n    more_id: string\r\n    name: string\r\n    path: string\r\n    private: boolean\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    updated: string\r\n    user_id: string\r\n    user_name: string\r\n    __v: number\r\n    _id: string\r\n}","import {Dispatch} from \"redux\";\r\nimport {errorAC, ErrorACType, isFetchingAC, isFetchingACType} from \"./request-reducer\";\r\nimport {CardsPackType, packAPI} from \"../api/pack-api\";\r\n\r\nlet initialState = {\r\n    cardPacks: [] as CardsPackType[],\r\n    cardPacksTotalCount: 0,\r\n    maxCardsCount: 0,\r\n    minCardsCount: 0,\r\n    page: 0,\r\n    pageCount: 0,\r\n    token: '',\r\n    tokenDeathTime: 0\r\n}\r\n\r\n\r\nexport const packReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_PACKS':\r\n            return {...state, cardPacks: action.cardPacks}\r\n        case 'REMOVE_PACK':\r\n            let newPack = {} as CardsPackType\r\n            return {...state, cardPacks: state.cardPacks.filter((pack) => pack._id != action._id)}\r\n        case 'ADD_PACK':\r\n            return {...state, cardPacks: [action.newPack, ...state.cardPacks]}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n// AC\r\nexport const setPacksAC = (cardPacks: CardsPackType[]) => ({type: 'SET_PACKS', cardPacks} as const)\r\nexport const removePackAC = (_id: string) => ({type: 'REMOVE_PACK', _id} as const)\r\nexport const addPackAC = (newPack: CardsPackType) => ({type: 'ADD_PACK', newPack} as const)\r\n\r\n// thunks\r\nexport const getPackTC = (user_id: string) => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType>) => {\r\n    dispatch(isFetchingAC(true))\r\n    packAPI.getCardPacksUser(user_id)\r\n        .then(res => {\r\n            dispatch(isFetchingAC(false))\r\n            dispatch(setPacksAC(res.data.cardPacks))\r\n        })\r\n        .catch((error) => {\r\n            //dispatch(errorAC(error.response.data.error))\r\n            dispatch(isFetchingAC(false))\r\n        })\r\n}\r\n\r\nexport const removePackTC = (_id: string) => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType>) => {\r\n    dispatch(isFetchingAC(true))\r\n    packAPI.removeCardPack(_id)\r\n        .then(res => {\r\n            dispatch(isFetchingAC(false))\r\n            dispatch(removePackAC(_id))\r\n        })\r\n        .catch((error) => {\r\n            //dispatch(errorAC(error.response.data.error))\r\n            dispatch(isFetchingAC(false))\r\n        })\r\n}\r\n\r\nexport const addPackTC = (name: string) => (dispatch: Dispatch<ActionsType | isFetchingACType | ErrorACType>) => {\r\n    dispatch(isFetchingAC(true))\r\n    packAPI.addCardPack(name)\r\n        .then(res => {\r\n            dispatch(isFetchingAC(false))\r\n        })\r\n        .catch((error) => {\r\n            dispatch(isFetchingAC(false))\r\n        })\r\n}\r\n\r\n\r\ntype InitialStateType = {\r\n    cardPacks: CardsPackType[]\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\ntype ActionsType = setPacksACType | removePackACType | addPackACType\r\n\r\n\r\nexport type setPacksACType = ReturnType<typeof setPacksAC>\r\nexport type removePackACType = ReturnType<typeof removePackAC>\r\nexport type addPackACType = ReturnType<typeof addPackAC>\r\n\r\n\r\n","import React from 'react'\r\nimport styles from './Preloader.module.css'\r\nimport preloader from '../../../assets/images/loader.svg'\r\n\r\nconst Preloader = () => {\r\n   return (\r\n      <div className={styles.wrapper}>\r\n         <img src={preloader} className={styles.img} alt='loader'/>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default React.memo(Preloader)\r\n","import React, {useEffect} from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../reducers/store\";\r\nimport {addPackTC, getPackTC, removePackTC} from \"../../reducers/pack-reducer\";\r\nimport Button from \"../common/Button/Button\";\r\nimport {CardsPackType} from \"../../api/pack-api\";\r\nimport {Link, Redirect} from 'react-router-dom'\r\nimport {LOGIN} from \"../../route\";\r\nimport classes from './Packs.module.scss'\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {authSucessTC} from \"../../reducers/login-reducer\";\r\n\r\nconst Packs = () => {\r\n    const requestIsFetching = useSelector<AppRootStateType, boolean>(state => state.request.isFetching)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    const cardPacks = useSelector<AppRootStateType, Array<CardsPackType>>(state => state.packs.cardPacks)\r\n    const user_id = useSelector<AppRootStateType, string>(state => state.login.profile._id)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getPackTC(user_id))\r\n        dispatch(authSucessTC())\r\n    }, [isLoggedIn])\r\n\r\n    const removePack = (_id: string) => {\r\n        dispatch(removePackTC(_id))\r\n        dispatch(getPackTC(user_id))\r\n    }\r\n\r\n    const addPack = (name: string) => {\r\n        dispatch(addPackTC(name))\r\n        dispatch(getPackTC(user_id))\r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={LOGIN}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            {requestIsFetching && <Preloader/>}\r\n            <h1>Packs </h1>\r\n            <Button\r\n                labelTitle={'Add new Pack'}\r\n                onClick={() => addPack('New super pack')}\r\n            />\r\n            <div className={classes.table}>\r\n                <div className={`${classes.tableHeader} ${classes.tableRow}`}>\r\n                    <div><strong>Name</strong></div>\r\n                    <div><strong>Show pack cards</strong></div>\r\n                    <div><strong>Actions</strong></div>\r\n                </div>\r\n\r\n                {cardPacks.map((pack) => {\r\n                    return (\r\n                        <div key={pack._id} className={classes.tableRow}>\r\n                            <div>{pack.name}</div>\r\n                            <div><Link to={`/cards/${pack._id}`}>Show cards</Link></div>\r\n                            <div>\r\n                                <Button labelTitle={'Edit'}/>\r\n                                <Button labelTitle={'Delete'} onClick={() => removePack(pack._id)}/></div>\r\n                        </div>\r\n\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Packs;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {Suspense} from 'react'\r\nimport './App.css'\r\nimport {Route, Switch} from 'react-router-dom'\r\nimport * as paths from './route'\r\nimport Login from './components/Login/Login'\r\nimport Profile from './components/Profile/Profile'\r\nimport Header from './components/Header/Header'\r\nimport Cards from \"./components/Cards/Cards\";\r\nimport Packs from \"./components/Packs/Packs\";\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from \"./reducers/store\";\r\nimport {authSucessTC} from './reducers/login-reducer'\r\nimport {Preloader} from './components/common'\r\n\r\nconst Registration = React.lazy(() => import('./components/Registration/Registration'))\r\nconst RestorePassword = React.lazy(() => import('./components/RestorePassword/RestorePassword'))\r\nconst NewPassword = React.lazy(() => import('./components/NewPassword/NewPassword'))\r\nconst NotFound = React.lazy(() => import('./components/NotFound/NotFound'))\r\n\r\nfunction App() {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    const requestIsFetching = useSelector<AppRootStateType, boolean>(state => state.request.isFetching)\r\n    const dispatch = useDispatch();\r\n\r\n    React.useEffect(() => {\r\n        dispatch(authSucessTC())\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {requestIsFetching && <Preloader/>}\r\n            <Header/>\r\n            <div className=\"content\">\r\n                <Suspense fallback={<Preloader/>}>\r\n                    <Switch>\r\n                        <Route exact path='/' render={() => isLoggedIn ? <Profile/> : <Login/>}/>\r\n                        <Route path={paths.LOGIN} render={() => <Login/>}/>\r\n                        <Route path={paths.PROFILE} render={() => <Profile/>}/>\r\n                        <Route path={paths.PACKS} render={() => <Packs/>}/>\r\n                        <Route path={paths.CARDS} render={() => <Cards/>}/>\r\n\r\n                        <Route path={paths.REGISTRATION} render={() => <Registration/>}/>\r\n                        <Route path={paths.RESTORE_PASSWORD} render={() => <RestorePassword/>}/>\r\n                        <Route path={paths.NEW_PASSWORD} render={() => <NewPassword/>}/>\r\n\r\n                        <Route component={NotFound}/>\r\n                    </Switch>\r\n                </Suspense>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React, {DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport classes from './Checkbox.module.scss'\r\n\r\ntype CheckboxPropsType\r\n   = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n   & {labelTitle?: string}\r\n\r\nconst Checkbox = (props: CheckboxPropsType) => {\r\n   const {labelTitle, ...restProps} = props\r\n   return (\r\n      <label className={classes.label}>\r\n         {labelTitle && <span className={classes.label}>{labelTitle}</span>}\r\n         <input {...restProps}\r\n                type=\"checkbox\"\r\n                className={classes.checkbox}/>\r\n         <div className={classes.customCheckbox}></div>\r\n      </label>\r\n   )\r\n}\r\n\r\nexport default React.memo(Checkbox)\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {loginReducer} from \"./login-reducer\";\r\nimport {newPswReducer} from \"./newPassword-reducer\";\r\nimport {restorePswReducer} from \"./restorePassword-reducer\";\r\nimport {registrationReducer} from \"./registration-reducer\";\r\nimport {requestReducer} from \"./request-reducer\";\r\nimport {packReducer} from \"./pack-reducer\";\r\nimport {cardsReducer} from \"./cards-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    login: loginReducer,\r\n    newPsw: newPswReducer,\r\n    restorePsw: restorePswReducer,\r\n    registration: registrationReducer,\r\n    request: requestReducer,\r\n    packs: packReducer,\r\n    cards: cardsReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from \"./reducers/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <HashRouter>\r\n                <App/>\r\n            </HashRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport classes from './Button.module.scss'\r\n\r\ntype InputPropsType\r\n    = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n    & { labelTitle?: string};\r\n\r\nconst Button = (props: InputPropsType) => {\r\n    const {labelTitle, ...restProps} = props\r\n    return (\r\n        <button className={classes.btn} {...restProps}> {props.labelTitle}</button>\r\n    )\r\n}\r\n\r\nexport default React.memo(Button)\r\n","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'http://localhost:7542/2.0/',\r\n    //baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    withCredentials: true\r\n})","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Navbar_menu__Mhcmp\",\"menuTitle\":\"Navbar_menuTitle__19_Im\",\"switch\":\"Navbar_switch__1pOjJ\",\"active\":\"Navbar_active__1XbSl\",\"navbar\":\"Navbar_navbar__3Queb\",\"activeLink\":\"Navbar_activeLink__15t2E\"};","let initialState = {\r\n   error: '',\r\n   isFetching: false,\r\n}\r\n\r\nexport type InitialState = typeof initialState\r\n\r\nexport const requestReducer = (state: InitialState = initialState, action: InitReducerActionsType) => {\r\n   switch (action.type) {\r\n      case 'REQUEST_ERROR':\r\n         return {...state, error: action.error}\r\n      case 'REQUEST_IS_FETCHING':\r\n         return {...state, isFetching: action.isFetching}\r\n      default:\r\n         return state\r\n   }\r\n}\r\n\r\nexport const errorAC = (error: string) => ({type: 'REQUEST_ERROR', error} as const)\r\nexport const isFetchingAC = (isFetching: boolean) => ({type: 'REQUEST_IS_FETCHING', isFetching} as const)\r\n\r\n\r\n// TYPES\r\nexport type ErrorACType = ReturnType<typeof errorAC>\r\nexport type isFetchingACType = ReturnType<typeof isFetchingAC>\r\ntype InitReducerActionsType = ErrorACType | isFetchingACType\r\n","import {instance} from './api'\r\n\r\n\r\nexport const authAPI = {\r\n   login: (data: LoginParamsType) =>\r\n      instance.post<LoginResponseType>('auth/login', data),\r\n   authMe: () =>\r\n      instance.post<LoginResponseType>('auth/me'),\r\n   logout: () =>\r\n      instance.delete<LoginResponseType>('auth/me'),\r\n   forgot: (data: ForgotParamsType) =>\r\n      instance.post<ForgotResponseType>('auth/forgot', data),\r\n   sendNewPassword: (data: NewPasswordParamsType) =>\r\n      instance.post<NewPasswordResponseType>('auth/set-new-password', data),\r\n   registration: (data: RegistrationParamsType) =>\r\n      instance.post<RegistrationResponseType>('auth/register', data),\r\n}\r\n\r\n// TYPES\r\n\r\nexport type LoginParamsType = {\r\n   password: string,\r\n   email: string,\r\n   rememberMe: boolean,\r\n}\r\n\r\nexport type LoginResponseType = {\r\n   _id: string,\r\n   email: string,\r\n   name: string,\r\n   avatar?: string,\r\n   publicCardPacksCount: number, // количество колод\r\n\r\n   created: string,\r\n   updated: string,\r\n   isAdmin: boolean,\r\n   verified: boolean, // подтвердил ли почту\r\n   rememberMe: boolean,\r\n\r\n   error: string,\r\n}\r\n\r\nexport type AddedUserType = {\r\n   email: string,\r\n   isAdmin: boolean,\r\n   __v: number,\r\n   _id: string,\r\n}\r\n\r\nexport type RegistrationResponseType = {\r\n   addedUser: AddedUserType,\r\n   success: boolean,\r\n}\r\n\r\n// export type LoginResponseErrorType = {\r\n//    body: LoginParamsType,\r\n//    error: string,\r\n//    method: string,\r\n//    query: {},\r\n//    url: string,\r\n// }\r\n\r\nexport type ForgotParamsType = {\r\n   email: string,\r\n   from: string,\r\n   message: string,\r\n}\r\n\r\nexport type ForgotResponseType = {\r\n   answer: boolean,\r\n   html: boolean,\r\n   info: string,\r\n   success: boolean,\r\n}\r\n\r\nexport type NewPasswordParamsType = {\r\n   password: string,\r\n   resetPasswordToken: string,\r\n}\r\n\r\nexport type NewPasswordResponseType = {\r\n   info: string,\r\n}\r\n\r\nexport type RegistrationParamsType = {\r\n   email: string,\r\n   password: string,\r\n   repeatPassword?: string,\r\n}\r\n\r\nexport type FormErrorType = {\r\n   email?: string,\r\n   password?: string,\r\n   repeatPassword?: string,\r\n   rememberMe?: boolean,\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Input_label__jOF-3\",\"error\":\"Input_error__39qKP\",\"errorMessage\":\"Input_errorMessage__3ysst\",\"showPassword\":\"Input_showPassword__2oNMr\",\"input\":\"Input_input__1VWGP\"};","import React from 'react'\r\nimport {findIconDefinition, IconDefinition, IconLookup} from '@fortawesome/fontawesome-svg-core'\r\nimport {library} from '@fortawesome/fontawesome-svg-core'\r\nimport {fas} from '@fortawesome/free-solid-svg-icons'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\n\r\nlibrary.add(fas)\r\n\r\nconst iconDefinition = (iconName: any, pref?: any): IconDefinition => {\r\n   const prefix = pref ? pref : 'fas'\r\n   const Lookup: IconLookup = {prefix: prefix, iconName: iconName}\r\n   return findIconDefinition(Lookup)\r\n}\r\n\r\n// создаете новую иконку с именем из каталога https://fontawesome.com/icons (только free)\r\nconst SignInAlt = () => <FontAwesomeIcon icon={iconDefinition('sign-in-alt')}/>\r\nconst SignOutAlt = () => <FontAwesomeIcon icon={iconDefinition('sign-out-alt')}/>\r\nconst Key = () => <FontAwesomeIcon icon={iconDefinition('key')}/>\r\nconst Lock = () => <FontAwesomeIcon icon={iconDefinition('lock')}/>\r\nconst Error = () => <FontAwesomeIcon icon={iconDefinition('exclamation-circle')}/>\r\nconst Eye = () => <FontAwesomeIcon icon={iconDefinition('eye')}/>\r\nconst EyeSlash = () => <FontAwesomeIcon icon={iconDefinition('eye-slash')}/>\r\nconst SearchLocation = () => <FontAwesomeIcon icon={iconDefinition('search-location')}/>\r\n\r\n// добавляете в этот объект\r\nconst Icons = {\r\n   SignInAlt,\r\n   SignOutAlt,\r\n   Key,\r\n   Lock,\r\n   Error,\r\n   Eye,\r\n   EyeSlash,\r\n   SearchLocation,\r\n}\r\n\r\nexport default Icons\r\n// в таком виде вставляете в разметку: { Icons.coffee() }\r\n","export const LOGIN = '/login';\r\nexport const NEW_PASSWORD = '/set-new-password/:token?'\r\nexport const PROFILE = '/profile'\r\nexport const REGISTRATION = '/registration'\r\nexport const RESTORE_PASSWORD = '/restore-password'\r\nexport const CARDS = '/cards/:cardId?'\r\nexport const PACKS = '/packs'","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Login_container__1dhzn\",\"formItem\":\"Login_formItem__1I2Ut\",\"subLinks\":\"Login_subLinks__3-Xeg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3jJh8\",\"table\":\"Cards_table__1OEYJ\",\"tableRow\":\"Cards_tableRow__nwf7S\",\"tableHeader\":\"Cards_tableHeader__1Rk_X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Packs_container__2Uv5c\",\"table\":\"Packs_table__1SSVS\",\"tableRow\":\"Packs_tableRow__1yRlX\",\"tableHeader\":\"Packs_tableHeader__kNgj8\"};","import React, {DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport classes from './Input.module.scss'\r\nimport Icons from '../Icons/Icons'\r\n\r\ntype InputPropsType\r\n   = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n   & { labelTitle?: string, error?: string }\r\n\r\nconst Input = (props: InputPropsType) => {\r\n\r\n   const [showPassword, setShowPassword] = React.useState<boolean>(false)\r\n\r\n   const handleShowPassword = () => {\r\n      setShowPassword(prevState => !prevState)\r\n   }\r\n\r\n   const {labelTitle, error, ...restProps} = props\r\n   const type = props.type === 'password' && !showPassword ? 'password' : 'text'\r\n\r\n   return (\r\n      <label className={classes.label}>\r\n         {labelTitle && <span className={classes.label}>{labelTitle}</span>}\r\n         <input {...restProps} type={type} className={`${classes.input} ${props.className}`}/>\r\n         {\r\n            type === 'password' &&\r\n               <div className={classes.showPassword} onClick={handleShowPassword}>\r\n                  {Icons.Eye()}\r\n               </div>\r\n         }\r\n         {\r\n            showPassword &&\r\n            <div className={classes.showPassword} onClick={handleShowPassword}>\r\n               {Icons.EyeSlash()}\r\n            </div>\r\n         }\r\n         {\r\n            error &&\r\n               <div className={classes.error}>\r\n                  {Icons.Error()}\r\n                  <div className={classes.errorMessage}>{error}</div>\r\n               </div>\r\n         }\r\n      </label>\r\n   )\r\n}\r\n\r\nexport default React.memo(Input)\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Checkbox_label__1q_k8\",\"checkbox\":\"Checkbox_checkbox__2d-7_\",\"customCheckbox\":\"Checkbox_customCheckbox__KijXE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__Wf4ao\",\"container\":\"Header_container__38qBT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Preloader_wrapper__SnQP1\",\"img\":\"Preloader_img__qADR8\"};"],"sourceRoot":""}